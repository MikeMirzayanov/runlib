// Code generated by protoc-gen-go.
// source: Contester.proto
// DO NOT EDIT!

package contester_proto

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type TestRun_Code int32

const (
	TestRun_Accepted            TestRun_Code = 10
	TestRun_TimeLimitExceeded   TestRun_Code = 11
	TestRun_RuntimeError        TestRun_Code = 12
	TestRun_WrongAnswer         TestRun_Code = 13
	TestRun_PresentationError   TestRun_Code = 14
	TestRun_MemoryLimitExceeded TestRun_Code = 15
	TestRun_TestingError        TestRun_Code = 16
)

var TestRun_Code_name = map[int32]string{
	10: "Accepted",
	11: "TimeLimitExceeded",
	12: "RuntimeError",
	13: "WrongAnswer",
	14: "PresentationError",
	15: "MemoryLimitExceeded",
	16: "TestingError",
}
var TestRun_Code_value = map[string]int32{
	"Accepted":            10,
	"TimeLimitExceeded":   11,
	"RuntimeError":        12,
	"WrongAnswer":         13,
	"PresentationError":   14,
	"MemoryLimitExceeded": 15,
	"TestingError":        16,
}

func (x TestRun_Code) Enum() *TestRun_Code {
	p := new(TestRun_Code)
	*p = x
	return p
}
func (x TestRun_Code) String() string {
	return proto.EnumName(TestRun_Code_name, int32(x))
}
func (x TestRun_Code) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *TestRun_Code) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestRun_Code_value, data, "TestRun_Code")
	if err != nil {
		return err
	}
	*x = TestRun_Code(value)
	return nil
}

type Compilation_Code int32

const (
	Compilation_Success Compilation_Code = 1
	Compilation_Failure Compilation_Code = 2
)

var Compilation_Code_name = map[int32]string{
	1: "Success",
	2: "Failure",
}
var Compilation_Code_value = map[string]int32{
	"Success": 1,
	"Failure": 2,
}

func (x Compilation_Code) Enum() *Compilation_Code {
	p := new(Compilation_Code)
	*p = x
	return p
}
func (x Compilation_Code) String() string {
	return proto.EnumName(Compilation_Code_name, int32(x))
}
func (x Compilation_Code) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *Compilation_Code) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Compilation_Code_value, data, "Compilation_Code")
	if err != nil {
		return err
	}
	*x = Compilation_Code(value)
	return nil
}

type TestRun struct {
	Solution         *LocalExecution `protobuf:"bytes,1,opt,name=solution" json:"solution,omitempty"`
	Tester           *LocalExecution `protobuf:"bytes,2,opt,name=tester" json:"tester,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *TestRun) Reset()         { *m = TestRun{} }
func (m *TestRun) String() string { return proto.CompactTextString(m) }
func (*TestRun) ProtoMessage()    {}

func (m *TestRun) GetSolution() *LocalExecution {
	if m != nil {
		return m.Solution
	}
	return nil
}

func (m *TestRun) GetTester() *LocalExecution {
	if m != nil {
		return m.Tester
	}
	return nil
}

type ComputedTestResult struct {
	Result           *TestRun_Code `protobuf:"varint,1,opt,name=result,enum=contester.proto.TestRun_Code" json:"result,omitempty"`
	Time             *uint32       `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Memory           *uint32       `protobuf:"varint,3,opt,name=memory" json:"memory,omitempty"`
	ReturnCode       *uint32       `protobuf:"varint,4,opt,name=return_code" json:"return_code,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ComputedTestResult) Reset()         { *m = ComputedTestResult{} }
func (m *ComputedTestResult) String() string { return proto.CompactTextString(m) }
func (*ComputedTestResult) ProtoMessage()    {}

func (m *ComputedTestResult) GetResult() TestRun_Code {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *ComputedTestResult) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *ComputedTestResult) GetMemory() uint32 {
	if m != nil && m.Memory != nil {
		return *m.Memory
	}
	return 0
}

func (m *ComputedTestResult) GetReturnCode() uint32 {
	if m != nil && m.ReturnCode != nil {
		return *m.ReturnCode
	}
	return 0
}

type Compilation struct {
	Failure          *bool                 `protobuf:"varint,1,opt,name=failure" json:"failure,omitempty"`
	ResultSteps      []*Compilation_Result `protobuf:"bytes,2,rep,name=result_steps" json:"result_steps,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *Compilation) Reset()         { *m = Compilation{} }
func (m *Compilation) String() string { return proto.CompactTextString(m) }
func (*Compilation) ProtoMessage()    {}

func (m *Compilation) GetFailure() bool {
	if m != nil && m.Failure != nil {
		return *m.Failure
	}
	return false
}

func (m *Compilation) GetResultSteps() []*Compilation_Result {
	if m != nil {
		return m.ResultSteps
	}
	return nil
}

type Compilation_Result struct {
	StepName         *string         `protobuf:"bytes,1,opt,name=step_name" json:"step_name,omitempty"`
	Execution        *LocalExecution `protobuf:"bytes,2,opt,name=execution" json:"execution,omitempty"`
	Failure          *bool           `protobuf:"varint,3,opt,name=failure" json:"failure,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Compilation_Result) Reset()         { *m = Compilation_Result{} }
func (m *Compilation_Result) String() string { return proto.CompactTextString(m) }
func (*Compilation_Result) ProtoMessage()    {}

func (m *Compilation_Result) GetStepName() string {
	if m != nil && m.StepName != nil {
		return *m.StepName
	}
	return ""
}

func (m *Compilation_Result) GetExecution() *LocalExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *Compilation_Result) GetFailure() bool {
	if m != nil && m.Failure != nil {
		return *m.Failure
	}
	return false
}

type CompileRequest struct {
	SourceModule     *Module   `protobuf:"bytes,1,req,name=source_module" json:"source_module,omitempty"`
	ExtraModules     []*Module `protobuf:"bytes,2,rep,name=extra_modules" json:"extra_modules,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *CompileRequest) Reset()         { *m = CompileRequest{} }
func (m *CompileRequest) String() string { return proto.CompactTextString(m) }
func (*CompileRequest) ProtoMessage()    {}

func (m *CompileRequest) GetSourceModule() *Module {
	if m != nil {
		return m.SourceModule
	}
	return nil
}

func (m *CompileRequest) GetExtraModules() []*Module {
	if m != nil {
		return m.ExtraModules
	}
	return nil
}

type CompileResponse struct {
	CompileResult    *Compilation `protobuf:"bytes,1,opt,name=compile_result" json:"compile_result,omitempty"`
	CompiledModule   *Module      `protobuf:"bytes,2,opt,name=compiled_module" json:"compiled_module,omitempty"`
	GeneralFailure   *string      `protobuf:"bytes,3,opt,name=general_failure" json:"general_failure,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CompileResponse) Reset()         { *m = CompileResponse{} }
func (m *CompileResponse) String() string { return proto.CompactTextString(m) }
func (*CompileResponse) ProtoMessage()    {}

func (m *CompileResponse) GetCompileResult() *Compilation {
	if m != nil {
		return m.CompileResult
	}
	return nil
}

func (m *CompileResponse) GetCompiledModule() *Module {
	if m != nil {
		return m.CompiledModule
	}
	return nil
}

func (m *CompileResponse) GetGeneralFailure() string {
	if m != nil && m.GeneralFailure != nil {
		return *m.GeneralFailure
	}
	return ""
}

type ProblemHandle struct {
	Url              *string `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	Revision         *uint32 `protobuf:"varint,2,opt,name=revision" json:"revision,omitempty"`
	Host             *string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProblemHandle) Reset()         { *m = ProblemHandle{} }
func (m *ProblemHandle) String() string { return proto.CompactTextString(m) }
func (*ProblemHandle) ProtoMessage()    {}

func (m *ProblemHandle) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *ProblemHandle) GetRevision() uint32 {
	if m != nil && m.Revision != nil {
		return *m.Revision
	}
	return 0
}

func (m *ProblemHandle) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

type SanitizeRequest struct {
	Problem          *ProblemHandle `protobuf:"bytes,1,opt,name=problem" json:"problem,omitempty"`
	Pdb              *string        `protobuf:"bytes,2,opt,name=pdb" json:"pdb,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *SanitizeRequest) Reset()         { *m = SanitizeRequest{} }
func (m *SanitizeRequest) String() string { return proto.CompactTextString(m) }
func (*SanitizeRequest) ProtoMessage()    {}

func (m *SanitizeRequest) GetProblem() *ProblemHandle {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *SanitizeRequest) GetPdb() string {
	if m != nil && m.Pdb != nil {
		return *m.Pdb
	}
	return ""
}

type ProblemManifest struct {
	ProblemXml       *Blob                        `protobuf:"bytes,1,opt,name=problemXml" json:"problemXml,omitempty"`
	CheckerHash      []byte                       `protobuf:"bytes,2,opt,name=checker_hash" json:"checker_hash,omitempty"`
	TestHashes       []*ProblemManifest_TestEntry `protobuf:"bytes,3,rep,name=test_hashes" json:"test_hashes,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *ProblemManifest) Reset()         { *m = ProblemManifest{} }
func (m *ProblemManifest) String() string { return proto.CompactTextString(m) }
func (*ProblemManifest) ProtoMessage()    {}

func (m *ProblemManifest) GetProblemXml() *Blob {
	if m != nil {
		return m.ProblemXml
	}
	return nil
}

func (m *ProblemManifest) GetCheckerHash() []byte {
	if m != nil {
		return m.CheckerHash
	}
	return nil
}

func (m *ProblemManifest) GetTestHashes() []*ProblemManifest_TestEntry {
	if m != nil {
		return m.TestHashes
	}
	return nil
}

type ProblemManifest_TestEntry struct {
	TestId           *uint32 `protobuf:"varint,1,opt,name=test_id" json:"test_id,omitempty"`
	InputHash        []byte  `protobuf:"bytes,2,opt,name=input_hash" json:"input_hash,omitempty"`
	AnswerHash       []byte  `protobuf:"bytes,3,opt,name=answer_hash" json:"answer_hash,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProblemManifest_TestEntry) Reset()         { *m = ProblemManifest_TestEntry{} }
func (m *ProblemManifest_TestEntry) String() string { return proto.CompactTextString(m) }
func (*ProblemManifest_TestEntry) ProtoMessage()    {}

func (m *ProblemManifest_TestEntry) GetTestId() uint32 {
	if m != nil && m.TestId != nil {
		return *m.TestId
	}
	return 0
}

func (m *ProblemManifest_TestEntry) GetInputHash() []byte {
	if m != nil {
		return m.InputHash
	}
	return nil
}

func (m *ProblemManifest_TestEntry) GetAnswerHash() []byte {
	if m != nil {
		return m.AnswerHash
	}
	return nil
}

type TestHandle struct {
	Pdb              *string        `protobuf:"bytes,1,opt,name=pdb" json:"pdb,omitempty"`
	Problem          *ProblemHandle `protobuf:"bytes,2,opt,name=problem" json:"problem,omitempty"`
	TestId           *uint32        `protobuf:"varint,3,opt,name=test_id" json:"test_id,omitempty"`
	TimeLimitMs      *uint32        `protobuf:"varint,4,opt,name=time_limit_ms" json:"time_limit_ms,omitempty"`
	MemoryLimitBytes *uint32        `protobuf:"varint,5,opt,name=memory_limit_bytes" json:"memory_limit_bytes,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *TestHandle) Reset()         { *m = TestHandle{} }
func (m *TestHandle) String() string { return proto.CompactTextString(m) }
func (*TestHandle) ProtoMessage()    {}

func (m *TestHandle) GetPdb() string {
	if m != nil && m.Pdb != nil {
		return *m.Pdb
	}
	return ""
}

func (m *TestHandle) GetProblem() *ProblemHandle {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *TestHandle) GetTestId() uint32 {
	if m != nil && m.TestId != nil {
		return *m.TestId
	}
	return 0
}

func (m *TestHandle) GetTimeLimitMs() uint32 {
	if m != nil && m.TimeLimitMs != nil {
		return *m.TimeLimitMs
	}
	return 0
}

func (m *TestHandle) GetMemoryLimitBytes() uint32 {
	if m != nil && m.MemoryLimitBytes != nil {
		return *m.MemoryLimitBytes
	}
	return 0
}

type TestData struct {
	Input            *Blob   `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
	Output           *Blob   `protobuf:"bytes,2,opt,name=output" json:"output,omitempty"`
	Checked          *Module `protobuf:"bytes,3,opt,name=checked" json:"checked,omitempty"`
	TimeLimitMs      *uint32 `protobuf:"varint,4,opt,name=time_limit_ms" json:"time_limit_ms,omitempty"`
	MemoryLimitBytes *uint32 `protobuf:"varint,5,opt,name=memory_limit_bytes" json:"memory_limit_bytes,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestData) Reset()         { *m = TestData{} }
func (m *TestData) String() string { return proto.CompactTextString(m) }
func (*TestData) ProtoMessage()    {}

func (m *TestData) GetInput() *Blob {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *TestData) GetOutput() *Blob {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *TestData) GetChecked() *Module {
	if m != nil {
		return m.Checked
	}
	return nil
}

func (m *TestData) GetTimeLimitMs() uint32 {
	if m != nil && m.TimeLimitMs != nil {
		return *m.TimeLimitMs
	}
	return 0
}

func (m *TestData) GetMemoryLimitBytes() uint32 {
	if m != nil && m.MemoryLimitBytes != nil {
		return *m.MemoryLimitBytes
	}
	return 0
}

type TestRequest struct {
	Module           *Module     `protobuf:"bytes,1,req,name=module" json:"module,omitempty"`
	TestHandle       *TestHandle `protobuf:"bytes,2,opt,name=test_handle" json:"test_handle,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}

func (m *TestRequest) GetModule() *Module {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *TestRequest) GetTestHandle() *TestHandle {
	if m != nil {
		return m.TestHandle
	}
	return nil
}

type TestResponse struct {
	TestResult       *TestRun `protobuf:"bytes,1,opt,name=test_result" json:"test_result,omitempty"`
	TestNotFound     *bool    `protobuf:"varint,2,opt,name=test_not_found" json:"test_not_found,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}

func (m *TestResponse) GetTestResult() *TestRun {
	if m != nil {
		return m.TestResult
	}
	return nil
}

func (m *TestResponse) GetTestNotFound() bool {
	if m != nil && m.TestNotFound != nil {
		return *m.TestNotFound
	}
	return false
}

type JudgeRequest struct {
	Module           *Module `protobuf:"bytes,1,opt,name=module" json:"module,omitempty"`
	ContestId        *int32  `protobuf:"varint,2,opt,name=contest_id" json:"contest_id,omitempty"`
	ProblemId        *string `protobuf:"bytes,3,opt,name=problem_id" json:"problem_id,omitempty"`
	SchoolMode       *bool   `protobuf:"varint,4,opt,name=school_mode" json:"school_mode,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *JudgeRequest) Reset()         { *m = JudgeRequest{} }
func (m *JudgeRequest) String() string { return proto.CompactTextString(m) }
func (*JudgeRequest) ProtoMessage()    {}

func (m *JudgeRequest) GetModule() *Module {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *JudgeRequest) GetContestId() int32 {
	if m != nil && m.ContestId != nil {
		return *m.ContestId
	}
	return 0
}

func (m *JudgeRequest) GetProblemId() string {
	if m != nil && m.ProblemId != nil {
		return *m.ProblemId
	}
	return ""
}

func (m *JudgeRequest) GetSchoolMode() bool {
	if m != nil && m.SchoolMode != nil {
		return *m.SchoolMode
	}
	return false
}

type JudgeResponse struct {
	ProblemNotFound  *bool  `protobuf:"varint,1,opt,name=problem_not_found" json:"problem_not_found,omitempty"`
	CompileFailed    *bool  `protobuf:"varint,2,opt,name=compile_failed" json:"compile_failed,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *JudgeResponse) Reset()         { *m = JudgeResponse{} }
func (m *JudgeResponse) String() string { return proto.CompactTextString(m) }
func (*JudgeResponse) ProtoMessage()    {}

func (m *JudgeResponse) GetProblemNotFound() bool {
	if m != nil && m.ProblemNotFound != nil {
		return *m.ProblemNotFound
	}
	return false
}

func (m *JudgeResponse) GetCompileFailed() bool {
	if m != nil && m.CompileFailed != nil {
		return *m.CompileFailed
	}
	return false
}

type ContestMapping struct {
	LocalId          *uint32 `protobuf:"varint,1,opt,name=local_id" json:"local_id,omitempty"`
	PolygonId        *uint32 `protobuf:"varint,2,opt,name=polygon_id" json:"polygon_id,omitempty"`
	SchoolMode       *bool   `protobuf:"varint,3,opt,name=school_mode" json:"school_mode,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContestMapping) Reset()         { *m = ContestMapping{} }
func (m *ContestMapping) String() string { return proto.CompactTextString(m) }
func (*ContestMapping) ProtoMessage()    {}

func (m *ContestMapping) GetLocalId() uint32 {
	if m != nil && m.LocalId != nil {
		return *m.LocalId
	}
	return 0
}

func (m *ContestMapping) GetPolygonId() uint32 {
	if m != nil && m.PolygonId != nil {
		return *m.PolygonId
	}
	return 0
}

func (m *ContestMapping) GetSchoolMode() bool {
	if m != nil && m.SchoolMode != nil {
		return *m.SchoolMode
	}
	return false
}

func init() {
	proto.RegisterEnum("contester.proto.TestRun_Code", TestRun_Code_name, TestRun_Code_value)
	proto.RegisterEnum("contester.proto.Compilation_Code", Compilation_Code_name, Compilation_Code_value)
}
