// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/contester/runlib/contester_proto/Contester.proto

package contester_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Compilation_Code int32

const (
	Compilation_Unknown Compilation_Code = 0
	Compilation_Success Compilation_Code = 1
	Compilation_Failure Compilation_Code = 2
)

var Compilation_Code_name = map[int32]string{
	0: "Unknown",
	1: "Success",
	2: "Failure",
}
var Compilation_Code_value = map[string]int32{
	"Unknown": 0,
	"Success": 1,
	"Failure": 2,
}

func (x Compilation_Code) String() string {
	return proto.EnumName(Compilation_Code_name, int32(x))
}
func (Compilation_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptorContester, []int{0, 0} }

type Compilation struct {
	Failure     bool                  `protobuf:"varint,1,opt,name=failure,proto3" json:"failure,omitempty"`
	ResultSteps []*Compilation_Result `protobuf:"bytes,2,rep,name=result_steps,json=resultSteps" json:"result_steps,omitempty"`
}

func (m *Compilation) Reset()                    { *m = Compilation{} }
func (*Compilation) ProtoMessage()               {}
func (*Compilation) Descriptor() ([]byte, []int) { return fileDescriptorContester, []int{0} }

func (m *Compilation) GetFailure() bool {
	if m != nil {
		return m.Failure
	}
	return false
}

func (m *Compilation) GetResultSteps() []*Compilation_Result {
	if m != nil {
		return m.ResultSteps
	}
	return nil
}

type Compilation_Result struct {
	StepName  string          `protobuf:"bytes,1,opt,name=step_name,json=stepName,proto3" json:"step_name,omitempty"`
	Execution *LocalExecution `protobuf:"bytes,2,opt,name=execution" json:"execution,omitempty"`
	Failure   bool            `protobuf:"varint,3,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *Compilation_Result) Reset()                    { *m = Compilation_Result{} }
func (*Compilation_Result) ProtoMessage()               {}
func (*Compilation_Result) Descriptor() ([]byte, []int) { return fileDescriptorContester, []int{0, 0} }

func (m *Compilation_Result) GetStepName() string {
	if m != nil {
		return m.StepName
	}
	return ""
}

func (m *Compilation_Result) GetExecution() *LocalExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *Compilation_Result) GetFailure() bool {
	if m != nil {
		return m.Failure
	}
	return false
}

func init() {
	proto.RegisterType((*Compilation)(nil), "contester.proto.Compilation")
	proto.RegisterType((*Compilation_Result)(nil), "contester.proto.Compilation.Result")
	proto.RegisterEnum("contester.proto.Compilation_Code", Compilation_Code_name, Compilation_Code_value)
}
func (this *Compilation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Compilation)
	if !ok {
		that2, ok := that.(Compilation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Failure != that1.Failure {
		return false
	}
	if len(this.ResultSteps) != len(that1.ResultSteps) {
		return false
	}
	for i := range this.ResultSteps {
		if !this.ResultSteps[i].Equal(that1.ResultSteps[i]) {
			return false
		}
	}
	return true
}
func (this *Compilation_Result) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Compilation_Result)
	if !ok {
		that2, ok := that.(Compilation_Result)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StepName != that1.StepName {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if this.Failure != that1.Failure {
		return false
	}
	return true
}
func (m *Compilation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Compilation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Failure {
		dAtA[i] = 0x8
		i++
		if m.Failure {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ResultSteps) > 0 {
		for _, msg := range m.ResultSteps {
			dAtA[i] = 0x12
			i++
			i = encodeVarintContester(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Compilation_Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Compilation_Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StepName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintContester(dAtA, i, uint64(len(m.StepName)))
		i += copy(dAtA[i:], m.StepName)
	}
	if m.Execution != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintContester(dAtA, i, uint64(m.Execution.Size()))
		n1, err := m.Execution.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Failure {
		dAtA[i] = 0x18
		i++
		if m.Failure {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintContester(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Compilation) Size() (n int) {
	var l int
	_ = l
	if m.Failure {
		n += 2
	}
	if len(m.ResultSteps) > 0 {
		for _, e := range m.ResultSteps {
			l = e.Size()
			n += 1 + l + sovContester(uint64(l))
		}
	}
	return n
}

func (m *Compilation_Result) Size() (n int) {
	var l int
	_ = l
	l = len(m.StepName)
	if l > 0 {
		n += 1 + l + sovContester(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovContester(uint64(l))
	}
	if m.Failure {
		n += 2
	}
	return n
}

func sovContester(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozContester(x uint64) (n int) {
	return sovContester(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Compilation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Compilation{`,
		`Failure:` + fmt.Sprintf("%v", this.Failure) + `,`,
		`ResultSteps:` + strings.Replace(fmt.Sprintf("%v", this.ResultSteps), "Compilation_Result", "Compilation_Result", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Compilation_Result) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Compilation_Result{`,
		`StepName:` + fmt.Sprintf("%v", this.StepName) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "LocalExecution", "LocalExecution", 1) + `,`,
		`Failure:` + fmt.Sprintf("%v", this.Failure) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringContester(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Compilation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContester
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compilation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compilation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failure = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultSteps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContester
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultSteps = append(m.ResultSteps, &Compilation_Result{})
			if err := m.ResultSteps[len(m.ResultSteps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContester(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContester
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Compilation_Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContester
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContester
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StepName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContester
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &LocalExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failure = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipContester(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContester
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContester(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContester
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContester
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContester
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthContester
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowContester
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipContester(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthContester = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContester   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/contester/runlib/contester_proto/Contester.proto", fileDescriptorContester)
}

var fileDescriptorContester = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8f, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xeb, 0x14, 0xf5, 0xc7, 0x41, 0xa2, 0xca, 0x14, 0x15, 0x64, 0xaa, 0xb2, 0x74, 0x69,
	0x22, 0x95, 0x01, 0x09, 0xc4, 0x42, 0x45, 0x27, 0xc4, 0x90, 0x8a, 0xb9, 0x4a, 0x8c, 0x1b, 0x22,
	0x12, 0xdf, 0xca, 0x3f, 0x02, 0x16, 0xc4, 0x63, 0x30, 0x31, 0xf3, 0x28, 0x8c, 0x8c, 0x8c, 0x10,
	0x5e, 0x04, 0x39, 0xa1, 0x6a, 0x5a, 0x26, 0x26, 0xfb, 0x1c, 0x9d, 0xef, 0xdc, 0x7b, 0xf1, 0x49,
	0x9c, 0xa8, 0x1b, 0x1d, 0x79, 0x14, 0x32, 0x9f, 0x02, 0x57, 0x4c, 0x2a, 0x26, 0x7c, 0xa1, 0x79,
	0x9a, 0x44, 0x2b, 0x63, 0xb6, 0x10, 0xa0, 0xc0, 0x1f, 0x2f, 0xb5, 0x57, 0x68, 0x67, 0x87, 0xae,
	0x1b, 0xdd, 0xa3, 0xff, 0xb4, 0x5d, 0x00, 0x0d, 0xd3, 0x5f, 0x70, 0x58, 0x01, 0x63, 0x88, 0xc1,
	0x2f, 0xec, 0x48, 0xcf, 0x0b, 0x55, 0xe6, 0xcd, 0xaf, 0x8c, 0xf7, 0x5f, 0x2c, 0x6c, 0x8f, 0x21,
	0x5b, 0x24, 0x69, 0xa8, 0x12, 0xe0, 0x8e, 0x8b, 0x9b, 0xf3, 0x30, 0x49, 0xb5, 0x60, 0x2e, 0xea,
	0xa1, 0x41, 0x2b, 0x58, 0x4a, 0x67, 0x82, 0xb7, 0x05, 0x93, 0x3a, 0x55, 0x33, 0xa9, 0xd8, 0x42,
	0xba, 0x56, 0xaf, 0x3e, 0xb0, 0x47, 0x07, 0xde, 0xc6, 0xe6, 0x5e, 0xa5, 0xcd, 0x0b, 0x0a, 0x20,
	0xb0, 0x4b, 0x70, 0x6a, 0xb8, 0xee, 0x23, 0x6e, 0x94, 0xb6, 0xb3, 0x8b, 0xdb, 0xa6, 0x6a, 0xc6,
	0xc3, 0xac, 0x9c, 0xd6, 0x0e, 0x5a, 0xc6, 0xb8, 0x0c, 0x33, 0xe6, 0x9c, 0xe2, 0x36, 0xbb, 0x67,
	0x54, 0x9b, 0x1e, 0xd7, 0xea, 0xa1, 0x81, 0x3d, 0xda, 0xff, 0x33, 0xab, 0x38, 0xfc, 0x7c, 0x19,
	0x0b, 0x56, 0x44, 0xf5, 0x8e, 0xfa, 0xda, 0x1d, 0xfd, 0x21, 0xde, 0x1a, 0xc3, 0x35, 0x73, 0x6c,
	0xdc, 0xbc, 0xe2, 0xb7, 0x1c, 0xee, 0x78, 0xa7, 0x66, 0xc4, 0x54, 0x53, 0xca, 0xa4, 0xec, 0x20,
	0x23, 0x26, 0x65, 0xb8, 0x63, 0x9d, 0x1d, 0x7f, 0x7c, 0x91, 0xda, 0x53, 0x4e, 0xd0, 0x6b, 0x4e,
	0xd0, 0x5b, 0x4e, 0xd0, 0x7b, 0x4e, 0xd0, 0x67, 0x4e, 0xd0, 0xf3, 0x37, 0xa9, 0xe1, 0x3d, 0x10,
	0xb1, 0x27, 0x55, 0xc2, 0x63, 0x11, 0x3e, 0x6c, 0xae, 0x17, 0x35, 0x8a, 0xe7, 0xf0, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x40, 0xc8, 0xdd, 0x64, 0x1b, 0x02, 0x00, 0x00,
}
