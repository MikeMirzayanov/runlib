// Code generated by protoc-gen-go from "Execution.proto"
// DO NOT EDIT!

package contester_proto

import proto "code.google.com/p/goprotobuf/proto"
import "encoding/json"
import "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type RedirectParameters struct {
	Filename         *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Memory           *bool   `protobuf:"varint,2,opt,name=memory" json:"memory,omitempty"`
	Buffer           *Blob   `protobuf:"bytes,3,opt,name=buffer" json:"buffer,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (this *RedirectParameters) Reset()         { *this = RedirectParameters{} }
func (this *RedirectParameters) String() string { return proto.CompactTextString(this) }
func (*RedirectParameters) ProtoMessage()       {}

func (this *RedirectParameters) GetFilename() string {
	if this != nil && this.Filename != nil {
		return *this.Filename
	}
	return ""
}

func (this *RedirectParameters) GetMemory() bool {
	if this != nil && this.Memory != nil {
		return *this.Memory
	}
	return false
}

func (this *RedirectParameters) GetBuffer() *Blob {
	if this != nil {
		return this.Buffer
	}
	return nil
}

type ExecutionResultFlags struct {
	Killed             *bool  `protobuf:"varint,1,opt,name=killed" json:"killed,omitempty"`
	TimeLimitHit       *bool  `protobuf:"varint,2,opt,name=time_limit_hit" json:"time_limit_hit,omitempty"`
	MemoryLimitHit     *bool  `protobuf:"varint,3,opt,name=memory_limit_hit" json:"memory_limit_hit,omitempty"`
	Inactive           *bool  `protobuf:"varint,4,opt,name=inactive" json:"inactive,omitempty"`
	TimeLimitHard      *bool  `protobuf:"varint,5,opt,name=time_limit_hard" json:"time_limit_hard,omitempty"`
	StdoutOverflow     *bool  `protobuf:"varint,6,opt,name=stdout_overflow" json:"stdout_overflow,omitempty"`
	StderrOverflow     *bool  `protobuf:"varint,7,opt,name=stderr_overflow" json:"stderr_overflow,omitempty"`
	StdpipeTimeout     *bool  `protobuf:"varint,8,opt,name=stdpipe_timeout" json:"stdpipe_timeout,omitempty"`
	TimeLimitHitPost   *bool  `protobuf:"varint,9,opt,name=time_limit_hit_post" json:"time_limit_hit_post,omitempty"`
	MemoryLimitHitPost *bool  `protobuf:"varint,10,opt,name=memory_limit_hit_post" json:"memory_limit_hit_post,omitempty"`
	ProcessLimitHit    *bool  `protobuf:"varint,11,opt,name=process_limit_hit" json:"process_limit_hit,omitempty"`
	StoppedBySignal    *bool  `protobuf:"varint,12,opt,name=stopped_by_signal" json:"stopped_by_signal,omitempty"`
	KilledBySignal     *bool  `protobuf:"varint,13,opt,name=killed_by_signal" json:"killed_by_signal,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (this *ExecutionResultFlags) Reset()         { *this = ExecutionResultFlags{} }
func (this *ExecutionResultFlags) String() string { return proto.CompactTextString(this) }
func (*ExecutionResultFlags) ProtoMessage()       {}

func (this *ExecutionResultFlags) GetKilled() bool {
	if this != nil && this.Killed != nil {
		return *this.Killed
	}
	return false
}

func (this *ExecutionResultFlags) GetTimeLimitHit() bool {
	if this != nil && this.TimeLimitHit != nil {
		return *this.TimeLimitHit
	}
	return false
}

func (this *ExecutionResultFlags) GetMemoryLimitHit() bool {
	if this != nil && this.MemoryLimitHit != nil {
		return *this.MemoryLimitHit
	}
	return false
}

func (this *ExecutionResultFlags) GetInactive() bool {
	if this != nil && this.Inactive != nil {
		return *this.Inactive
	}
	return false
}

func (this *ExecutionResultFlags) GetTimeLimitHard() bool {
	if this != nil && this.TimeLimitHard != nil {
		return *this.TimeLimitHard
	}
	return false
}

func (this *ExecutionResultFlags) GetStdoutOverflow() bool {
	if this != nil && this.StdoutOverflow != nil {
		return *this.StdoutOverflow
	}
	return false
}

func (this *ExecutionResultFlags) GetStderrOverflow() bool {
	if this != nil && this.StderrOverflow != nil {
		return *this.StderrOverflow
	}
	return false
}

func (this *ExecutionResultFlags) GetStdpipeTimeout() bool {
	if this != nil && this.StdpipeTimeout != nil {
		return *this.StdpipeTimeout
	}
	return false
}

func (this *ExecutionResultFlags) GetTimeLimitHitPost() bool {
	if this != nil && this.TimeLimitHitPost != nil {
		return *this.TimeLimitHitPost
	}
	return false
}

func (this *ExecutionResultFlags) GetMemoryLimitHitPost() bool {
	if this != nil && this.MemoryLimitHitPost != nil {
		return *this.MemoryLimitHitPost
	}
	return false
}

func (this *ExecutionResultFlags) GetProcessLimitHit() bool {
	if this != nil && this.ProcessLimitHit != nil {
		return *this.ProcessLimitHit
	}
	return false
}

func (this *ExecutionResultFlags) GetStoppedBySignal() bool {
	if this != nil && this.StoppedBySignal != nil {
		return *this.StoppedBySignal
	}
	return false
}

func (this *ExecutionResultFlags) GetKilledBySignal() bool {
	if this != nil && this.KilledBySignal != nil {
		return *this.KilledBySignal
	}
	return false
}

type ExecutionResultTime struct {
	UserTimeMicros   *uint64 `protobuf:"varint,1,opt,name=user_time_micros" json:"user_time_micros,omitempty"`
	KernelTimeMicros *uint64 `protobuf:"varint,2,opt,name=kernel_time_micros" json:"kernel_time_micros,omitempty"`
	WallTimeMicros   *uint64 `protobuf:"varint,3,opt,name=wall_time_micros" json:"wall_time_micros,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (this *ExecutionResultTime) Reset()         { *this = ExecutionResultTime{} }
func (this *ExecutionResultTime) String() string { return proto.CompactTextString(this) }
func (*ExecutionResultTime) ProtoMessage()       {}

func (this *ExecutionResultTime) GetUserTimeMicros() uint64 {
	if this != nil && this.UserTimeMicros != nil {
		return *this.UserTimeMicros
	}
	return 0
}

func (this *ExecutionResultTime) GetKernelTimeMicros() uint64 {
	if this != nil && this.KernelTimeMicros != nil {
		return *this.KernelTimeMicros
	}
	return 0
}

func (this *ExecutionResultTime) GetWallTimeMicros() uint64 {
	if this != nil && this.WallTimeMicros != nil {
		return *this.WallTimeMicros
	}
	return 0
}

func init() {
}
