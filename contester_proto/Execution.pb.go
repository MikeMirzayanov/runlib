// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/contester/runlib/contester_proto/Execution.proto

package contester_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RedirectParameters struct {
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Memory   bool   `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Buffer   *Blob  `protobuf:"bytes,3,opt,name=buffer" json:"buffer,omitempty"`
}

func (m *RedirectParameters) Reset()                    { *m = RedirectParameters{} }
func (*RedirectParameters) ProtoMessage()               {}
func (*RedirectParameters) Descriptor() ([]byte, []int) { return fileDescriptorExecution, []int{0} }

func (m *RedirectParameters) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *RedirectParameters) GetMemory() bool {
	if m != nil {
		return m.Memory
	}
	return false
}

func (m *RedirectParameters) GetBuffer() *Blob {
	if m != nil {
		return m.Buffer
	}
	return nil
}

type ExecutionResultFlags struct {
	Killed             bool `protobuf:"varint,1,opt,name=killed,proto3" json:"killed,omitempty"`
	TimeLimitHit       bool `protobuf:"varint,2,opt,name=time_limit_hit,json=timeLimitHit,proto3" json:"time_limit_hit,omitempty"`
	MemoryLimitHit     bool `protobuf:"varint,3,opt,name=memory_limit_hit,json=memoryLimitHit,proto3" json:"memory_limit_hit,omitempty"`
	Inactive           bool `protobuf:"varint,4,opt,name=inactive,proto3" json:"inactive,omitempty"`
	TimeLimitHard      bool `protobuf:"varint,5,opt,name=time_limit_hard,json=timeLimitHard,proto3" json:"time_limit_hard,omitempty"`
	StdoutOverflow     bool `protobuf:"varint,6,opt,name=stdout_overflow,json=stdoutOverflow,proto3" json:"stdout_overflow,omitempty"`
	StderrOverflow     bool `protobuf:"varint,7,opt,name=stderr_overflow,json=stderrOverflow,proto3" json:"stderr_overflow,omitempty"`
	StdpipeTimeout     bool `protobuf:"varint,8,opt,name=stdpipe_timeout,json=stdpipeTimeout,proto3" json:"stdpipe_timeout,omitempty"`
	TimeLimitHitPost   bool `protobuf:"varint,9,opt,name=time_limit_hit_post,json=timeLimitHitPost,proto3" json:"time_limit_hit_post,omitempty"`
	MemoryLimitHitPost bool `protobuf:"varint,10,opt,name=memory_limit_hit_post,json=memoryLimitHitPost,proto3" json:"memory_limit_hit_post,omitempty"`
	ProcessLimitHit    bool `protobuf:"varint,11,opt,name=process_limit_hit,json=processLimitHit,proto3" json:"process_limit_hit,omitempty"`
	StoppedBySignal    bool `protobuf:"varint,12,opt,name=stopped_by_signal,json=stoppedBySignal,proto3" json:"stopped_by_signal,omitempty"`
	KilledBySignal     bool `protobuf:"varint,13,opt,name=killed_by_signal,json=killedBySignal,proto3" json:"killed_by_signal,omitempty"`
}

func (m *ExecutionResultFlags) Reset()                    { *m = ExecutionResultFlags{} }
func (*ExecutionResultFlags) ProtoMessage()               {}
func (*ExecutionResultFlags) Descriptor() ([]byte, []int) { return fileDescriptorExecution, []int{1} }

func (m *ExecutionResultFlags) GetKilled() bool {
	if m != nil {
		return m.Killed
	}
	return false
}

func (m *ExecutionResultFlags) GetTimeLimitHit() bool {
	if m != nil {
		return m.TimeLimitHit
	}
	return false
}

func (m *ExecutionResultFlags) GetMemoryLimitHit() bool {
	if m != nil {
		return m.MemoryLimitHit
	}
	return false
}

func (m *ExecutionResultFlags) GetInactive() bool {
	if m != nil {
		return m.Inactive
	}
	return false
}

func (m *ExecutionResultFlags) GetTimeLimitHard() bool {
	if m != nil {
		return m.TimeLimitHard
	}
	return false
}

func (m *ExecutionResultFlags) GetStdoutOverflow() bool {
	if m != nil {
		return m.StdoutOverflow
	}
	return false
}

func (m *ExecutionResultFlags) GetStderrOverflow() bool {
	if m != nil {
		return m.StderrOverflow
	}
	return false
}

func (m *ExecutionResultFlags) GetStdpipeTimeout() bool {
	if m != nil {
		return m.StdpipeTimeout
	}
	return false
}

func (m *ExecutionResultFlags) GetTimeLimitHitPost() bool {
	if m != nil {
		return m.TimeLimitHitPost
	}
	return false
}

func (m *ExecutionResultFlags) GetMemoryLimitHitPost() bool {
	if m != nil {
		return m.MemoryLimitHitPost
	}
	return false
}

func (m *ExecutionResultFlags) GetProcessLimitHit() bool {
	if m != nil {
		return m.ProcessLimitHit
	}
	return false
}

func (m *ExecutionResultFlags) GetStoppedBySignal() bool {
	if m != nil {
		return m.StoppedBySignal
	}
	return false
}

func (m *ExecutionResultFlags) GetKilledBySignal() bool {
	if m != nil {
		return m.KilledBySignal
	}
	return false
}

type ExecutionResultTime struct {
	UserTimeMicros   uint64 `protobuf:"varint,1,opt,name=user_time_micros,json=userTimeMicros,proto3" json:"user_time_micros,omitempty"`
	KernelTimeMicros uint64 `protobuf:"varint,2,opt,name=kernel_time_micros,json=kernelTimeMicros,proto3" json:"kernel_time_micros,omitempty"`
	WallTimeMicros   uint64 `protobuf:"varint,3,opt,name=wall_time_micros,json=wallTimeMicros,proto3" json:"wall_time_micros,omitempty"`
}

func (m *ExecutionResultTime) Reset()                    { *m = ExecutionResultTime{} }
func (*ExecutionResultTime) ProtoMessage()               {}
func (*ExecutionResultTime) Descriptor() ([]byte, []int) { return fileDescriptorExecution, []int{2} }

func (m *ExecutionResultTime) GetUserTimeMicros() uint64 {
	if m != nil {
		return m.UserTimeMicros
	}
	return 0
}

func (m *ExecutionResultTime) GetKernelTimeMicros() uint64 {
	if m != nil {
		return m.KernelTimeMicros
	}
	return 0
}

func (m *ExecutionResultTime) GetWallTimeMicros() uint64 {
	if m != nil {
		return m.WallTimeMicros
	}
	return 0
}

func init() {
	proto.RegisterType((*RedirectParameters)(nil), "contester.proto.RedirectParameters")
	proto.RegisterType((*ExecutionResultFlags)(nil), "contester.proto.ExecutionResultFlags")
	proto.RegisterType((*ExecutionResultTime)(nil), "contester.proto.ExecutionResultTime")
}
func (this *RedirectParameters) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RedirectParameters)
	if !ok {
		that2, ok := that.(RedirectParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Filename != that1.Filename {
		return false
	}
	if this.Memory != that1.Memory {
		return false
	}
	if !this.Buffer.Equal(that1.Buffer) {
		return false
	}
	return true
}
func (this *ExecutionResultFlags) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecutionResultFlags)
	if !ok {
		that2, ok := that.(ExecutionResultFlags)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Killed != that1.Killed {
		return false
	}
	if this.TimeLimitHit != that1.TimeLimitHit {
		return false
	}
	if this.MemoryLimitHit != that1.MemoryLimitHit {
		return false
	}
	if this.Inactive != that1.Inactive {
		return false
	}
	if this.TimeLimitHard != that1.TimeLimitHard {
		return false
	}
	if this.StdoutOverflow != that1.StdoutOverflow {
		return false
	}
	if this.StderrOverflow != that1.StderrOverflow {
		return false
	}
	if this.StdpipeTimeout != that1.StdpipeTimeout {
		return false
	}
	if this.TimeLimitHitPost != that1.TimeLimitHitPost {
		return false
	}
	if this.MemoryLimitHitPost != that1.MemoryLimitHitPost {
		return false
	}
	if this.ProcessLimitHit != that1.ProcessLimitHit {
		return false
	}
	if this.StoppedBySignal != that1.StoppedBySignal {
		return false
	}
	if this.KilledBySignal != that1.KilledBySignal {
		return false
	}
	return true
}
func (this *ExecutionResultTime) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecutionResultTime)
	if !ok {
		that2, ok := that.(ExecutionResultTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UserTimeMicros != that1.UserTimeMicros {
		return false
	}
	if this.KernelTimeMicros != that1.KernelTimeMicros {
		return false
	}
	if this.WallTimeMicros != that1.WallTimeMicros {
		return false
	}
	return true
}
func (m *RedirectParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedirectParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Filename) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExecution(dAtA, i, uint64(len(m.Filename)))
		i += copy(dAtA[i:], m.Filename)
	}
	if m.Memory {
		dAtA[i] = 0x10
		i++
		if m.Memory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Buffer != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExecution(dAtA, i, uint64(m.Buffer.Size()))
		n1, err := m.Buffer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ExecutionResultFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionResultFlags) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Killed {
		dAtA[i] = 0x8
		i++
		if m.Killed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TimeLimitHit {
		dAtA[i] = 0x10
		i++
		if m.TimeLimitHit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MemoryLimitHit {
		dAtA[i] = 0x18
		i++
		if m.MemoryLimitHit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Inactive {
		dAtA[i] = 0x20
		i++
		if m.Inactive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TimeLimitHard {
		dAtA[i] = 0x28
		i++
		if m.TimeLimitHard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StdoutOverflow {
		dAtA[i] = 0x30
		i++
		if m.StdoutOverflow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StderrOverflow {
		dAtA[i] = 0x38
		i++
		if m.StderrOverflow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StdpipeTimeout {
		dAtA[i] = 0x40
		i++
		if m.StdpipeTimeout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TimeLimitHitPost {
		dAtA[i] = 0x48
		i++
		if m.TimeLimitHitPost {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MemoryLimitHitPost {
		dAtA[i] = 0x50
		i++
		if m.MemoryLimitHitPost {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ProcessLimitHit {
		dAtA[i] = 0x58
		i++
		if m.ProcessLimitHit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StoppedBySignal {
		dAtA[i] = 0x60
		i++
		if m.StoppedBySignal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KilledBySignal {
		dAtA[i] = 0x68
		i++
		if m.KilledBySignal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ExecutionResultTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionResultTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserTimeMicros != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExecution(dAtA, i, uint64(m.UserTimeMicros))
	}
	if m.KernelTimeMicros != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExecution(dAtA, i, uint64(m.KernelTimeMicros))
	}
	if m.WallTimeMicros != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExecution(dAtA, i, uint64(m.WallTimeMicros))
	}
	return i, nil
}

func encodeFixed64Execution(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Execution(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintExecution(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RedirectParameters) Size() (n int) {
	var l int
	_ = l
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovExecution(uint64(l))
	}
	if m.Memory {
		n += 2
	}
	if m.Buffer != nil {
		l = m.Buffer.Size()
		n += 1 + l + sovExecution(uint64(l))
	}
	return n
}

func (m *ExecutionResultFlags) Size() (n int) {
	var l int
	_ = l
	if m.Killed {
		n += 2
	}
	if m.TimeLimitHit {
		n += 2
	}
	if m.MemoryLimitHit {
		n += 2
	}
	if m.Inactive {
		n += 2
	}
	if m.TimeLimitHard {
		n += 2
	}
	if m.StdoutOverflow {
		n += 2
	}
	if m.StderrOverflow {
		n += 2
	}
	if m.StdpipeTimeout {
		n += 2
	}
	if m.TimeLimitHitPost {
		n += 2
	}
	if m.MemoryLimitHitPost {
		n += 2
	}
	if m.ProcessLimitHit {
		n += 2
	}
	if m.StoppedBySignal {
		n += 2
	}
	if m.KilledBySignal {
		n += 2
	}
	return n
}

func (m *ExecutionResultTime) Size() (n int) {
	var l int
	_ = l
	if m.UserTimeMicros != 0 {
		n += 1 + sovExecution(uint64(m.UserTimeMicros))
	}
	if m.KernelTimeMicros != 0 {
		n += 1 + sovExecution(uint64(m.KernelTimeMicros))
	}
	if m.WallTimeMicros != 0 {
		n += 1 + sovExecution(uint64(m.WallTimeMicros))
	}
	return n
}

func sovExecution(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExecution(x uint64) (n int) {
	return sovExecution(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RedirectParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RedirectParameters{`,
		`Filename:` + fmt.Sprintf("%v", this.Filename) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`Buffer:` + strings.Replace(fmt.Sprintf("%v", this.Buffer), "Blob", "Blob", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionResultFlags) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionResultFlags{`,
		`Killed:` + fmt.Sprintf("%v", this.Killed) + `,`,
		`TimeLimitHit:` + fmt.Sprintf("%v", this.TimeLimitHit) + `,`,
		`MemoryLimitHit:` + fmt.Sprintf("%v", this.MemoryLimitHit) + `,`,
		`Inactive:` + fmt.Sprintf("%v", this.Inactive) + `,`,
		`TimeLimitHard:` + fmt.Sprintf("%v", this.TimeLimitHard) + `,`,
		`StdoutOverflow:` + fmt.Sprintf("%v", this.StdoutOverflow) + `,`,
		`StderrOverflow:` + fmt.Sprintf("%v", this.StderrOverflow) + `,`,
		`StdpipeTimeout:` + fmt.Sprintf("%v", this.StdpipeTimeout) + `,`,
		`TimeLimitHitPost:` + fmt.Sprintf("%v", this.TimeLimitHitPost) + `,`,
		`MemoryLimitHitPost:` + fmt.Sprintf("%v", this.MemoryLimitHitPost) + `,`,
		`ProcessLimitHit:` + fmt.Sprintf("%v", this.ProcessLimitHit) + `,`,
		`StoppedBySignal:` + fmt.Sprintf("%v", this.StoppedBySignal) + `,`,
		`KilledBySignal:` + fmt.Sprintf("%v", this.KilledBySignal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionResultTime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionResultTime{`,
		`UserTimeMicros:` + fmt.Sprintf("%v", this.UserTimeMicros) + `,`,
		`KernelTimeMicros:` + fmt.Sprintf("%v", this.KernelTimeMicros) + `,`,
		`WallTimeMicros:` + fmt.Sprintf("%v", this.WallTimeMicros) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringExecution(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RedirectParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedirectParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedirectParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Memory = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buffer == nil {
				m.Buffer = &Blob{}
			}
			if err := m.Buffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionResultFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionResultFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionResultFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Killed = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimitHit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeLimitHit = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryLimitHit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemoryLimitHit = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inactive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inactive = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimitHard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeLimitHard = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdoutOverflow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StdoutOverflow = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StderrOverflow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StderrOverflow = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdpipeTimeout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StdpipeTimeout = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimitHitPost", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeLimitHitPost = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryLimitHitPost", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemoryLimitHitPost = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessLimitHit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessLimitHit = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoppedBySignal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoppedBySignal = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KilledBySignal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KilledBySignal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionResultTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionResultTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionResultTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTimeMicros", wireType)
			}
			m.UserTimeMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserTimeMicros |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelTimeMicros", wireType)
			}
			m.KernelTimeMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KernelTimeMicros |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WallTimeMicros", wireType)
			}
			m.WallTimeMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WallTimeMicros |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecution(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecution
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExecution
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExecution
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExecution(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExecution = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecution   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/contester/runlib/contester_proto/Execution.proto", fileDescriptorExecution)
}

var fileDescriptorExecution = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x97, 0xad, 0x94, 0xce, 0xdb, 0xda, 0xce, 0x63, 0x28, 0xaa, 0x50, 0x54, 0x55, 0x08,
	0xaa, 0x89, 0xb6, 0x02, 0x0e, 0x48, 0x70, 0xab, 0x04, 0xe2, 0x00, 0x62, 0x0a, 0xdc, 0xa3, 0xfc,
	0x78, 0xcd, 0xac, 0x39, 0x71, 0xf4, 0xec, 0xac, 0xf4, 0xc6, 0x7f, 0x01, 0x57, 0x6e, 0xfc, 0x29,
	0x1c, 0x39, 0x72, 0x84, 0xf2, 0x8f, 0x20, 0xdb, 0x21, 0x4d, 0x7b, 0xe3, 0xd4, 0xbe, 0x8f, 0x3f,
	0xcf, 0x2f, 0xfe, 0xc6, 0x21, 0x2f, 0x52, 0xa6, 0xae, 0xca, 0x68, 0x1a, 0x8b, 0x6c, 0x16, 0x8b,
	0x5c, 0x81, 0x54, 0x80, 0x33, 0x2c, 0x73, 0xce, 0xa2, 0x0d, 0x08, 0x0a, 0x14, 0x4a, 0xcc, 0x5e,
	0x7e, 0x84, 0xb8, 0x54, 0x4c, 0xe4, 0x53, 0x53, 0xd3, 0x5e, 0x2d, 0x58, 0x30, 0x78, 0xf6, 0x3f,
	0xbb, 0xcd, 0xb9, 0x88, 0x64, 0xd5, 0x38, 0x69, 0x34, 0xa6, 0x22, 0x15, 0x33, 0x83, 0xa3, 0x72,
	0x61, 0x2a, 0xeb, 0xeb, 0x7f, 0x56, 0x1f, 0x2d, 0x09, 0xf5, 0x21, 0x61, 0x08, 0xb1, 0xba, 0x0c,
	0x31, 0xcc, 0x40, 0x01, 0x4a, 0x3a, 0x20, 0x9d, 0x05, 0xe3, 0x90, 0x87, 0x19, 0xb8, 0xce, 0xd0,
	0x19, 0x1f, 0xfa, 0x75, 0x4d, 0xef, 0x92, 0x76, 0x06, 0x99, 0xc0, 0x95, 0xbb, 0x3f, 0x74, 0xc6,
	0x1d, 0xbf, 0xaa, 0xe8, 0x84, 0xb4, 0xa3, 0x72, 0xb1, 0x00, 0x74, 0x0f, 0x86, 0xce, 0xf8, 0xe8,
	0xc9, 0xf9, 0x74, 0xe7, 0x4c, 0x53, 0xfd, 0x98, 0x7e, 0x25, 0x8d, 0xbe, 0xb6, 0xc8, 0x9d, 0x3a,
	0x05, 0x1f, 0x64, 0xc9, 0xd5, 0x2b, 0x1e, 0xa6, 0x52, 0xef, 0x7f, 0xcd, 0x38, 0x87, 0xc4, 0x4c,
	0xee, 0xf8, 0x55, 0x45, 0xef, 0x93, 0xae, 0x62, 0x19, 0x04, 0x9c, 0x65, 0x4c, 0x05, 0x57, 0x4c,
	0x55, 0xf3, 0x8f, 0x35, 0x7d, 0xa3, 0xe1, 0x6b, 0xa6, 0xe8, 0x98, 0xf4, 0xed, 0xf3, 0x34, 0xbc,
	0x03, 0xe3, 0x75, 0x2d, 0xaf, 0xcd, 0x01, 0xe9, 0xb0, 0x3c, 0x8c, 0x15, 0xbb, 0x01, 0xb7, 0x65,
	0x8c, 0xba, 0xa6, 0x0f, 0x48, 0xaf, 0x39, 0x2b, 0xc4, 0xc4, 0xbd, 0x65, 0x94, 0x93, 0xcd, 0xb0,
	0x10, 0x13, 0xfa, 0x90, 0xf4, 0xa4, 0x4a, 0x44, 0xa9, 0x02, 0x71, 0x03, 0xb8, 0xe0, 0x62, 0xe9,
	0xb6, 0xed, 0x30, 0x8b, 0xdf, 0x55, 0xb4, 0x12, 0x01, 0x71, 0x23, 0xde, 0xae, 0x45, 0x40, 0xdc,
	0x11, 0x0b, 0x56, 0x40, 0xa0, 0x47, 0x89, 0x52, 0xb9, 0x9d, 0x5a, 0xd4, 0xf8, 0x83, 0xa5, 0x74,
	0x42, 0xce, 0xb6, 0xe3, 0x08, 0x0a, 0x21, 0x95, 0x7b, 0x68, 0xe4, 0x7e, 0x33, 0x93, 0x4b, 0x21,
	0x15, 0x7d, 0x4c, 0xce, 0x77, 0x73, 0xb1, 0x0d, 0xc4, 0x34, 0xd0, 0xed, 0x70, 0x4c, 0xcb, 0x05,
	0x39, 0x2d, 0x50, 0xc4, 0x20, 0x65, 0x23, 0xcb, 0x23, 0xa3, 0xf7, 0xaa, 0x85, 0x3a, 0xcc, 0x0b,
	0x72, 0x2a, 0x95, 0x28, 0x0a, 0x48, 0x82, 0x68, 0x15, 0x48, 0x96, 0xe6, 0x21, 0x77, 0x8f, 0xad,
	0x5b, 0x2d, 0xcc, 0x57, 0xef, 0x0d, 0xd6, 0xaf, 0xc8, 0xbe, 0xd2, 0x86, 0x7a, 0x62, 0xcf, 0x68,
	0xf9, 0x3f, 0x73, 0xf4, 0xd9, 0x21, 0x67, 0x3b, 0x77, 0x44, 0x1f, 0x5f, 0xef, 0x50, 0x4a, 0x40,
	0x93, 0x50, 0x90, 0xb1, 0x18, 0x85, 0x34, 0x97, 0xa5, 0xe5, 0x77, 0x35, 0xd7, 0xce, 0x5b, 0x43,
	0xe9, 0x23, 0x42, 0xaf, 0x01, 0x73, 0xe0, 0x5b, 0xee, 0xbe, 0x71, 0xfb, 0x76, 0xa5, 0x61, 0x8f,
	0x49, 0x7f, 0x19, 0xf2, 0x6d, 0xf7, 0xc0, 0xee, 0xab, 0xf9, 0xc6, 0x9c, 0x3f, 0xff, 0xf9, 0xdb,
	0xdb, 0xfb, 0xb4, 0xf6, 0x9c, 0x6f, 0x6b, 0xcf, 0xf9, 0xbe, 0xf6, 0x9c, 0x1f, 0x6b, 0xcf, 0xf9,
	0xb5, 0xf6, 0x9c, 0x2f, 0x7f, 0xbc, 0x3d, 0x72, 0x4f, 0x60, 0x3a, 0x95, 0x8a, 0xe5, 0x29, 0x86,
	0xab, 0xdd, 0xcf, 0x20, 0x6a, 0x9b, 0x9f, 0xa7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x29,
	0x14, 0xd8, 0x31, 0x04, 0x00, 0x00,
}
