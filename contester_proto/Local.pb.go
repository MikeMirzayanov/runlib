// Code generated by protoc-gen-gogo.
// source: Local.proto
// DO NOT EDIT!

package contester_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BinaryTypeResponse_Win32BinaryType int32

const (
	BinaryTypeResponse_SCS_32BIT_BINARY BinaryTypeResponse_Win32BinaryType = 0
	BinaryTypeResponse_SCS_DOS_BINARY   BinaryTypeResponse_Win32BinaryType = 1
	BinaryTypeResponse_SCS_WOW_BINARY   BinaryTypeResponse_Win32BinaryType = 2
	BinaryTypeResponse_SCS_PIF_BINARY   BinaryTypeResponse_Win32BinaryType = 3
	BinaryTypeResponse_SCS_POSIX_BINARY BinaryTypeResponse_Win32BinaryType = 4
	BinaryTypeResponse_SCS_OS216_BINARY BinaryTypeResponse_Win32BinaryType = 5
	BinaryTypeResponse_SCS_64BIT_BINARY BinaryTypeResponse_Win32BinaryType = 6
)

var BinaryTypeResponse_Win32BinaryType_name = map[int32]string{
	0: "SCS_32BIT_BINARY",
	1: "SCS_DOS_BINARY",
	2: "SCS_WOW_BINARY",
	3: "SCS_PIF_BINARY",
	4: "SCS_POSIX_BINARY",
	5: "SCS_OS216_BINARY",
	6: "SCS_64BIT_BINARY",
}
var BinaryTypeResponse_Win32BinaryType_value = map[string]int32{
	"SCS_32BIT_BINARY": 0,
	"SCS_DOS_BINARY":   1,
	"SCS_WOW_BINARY":   2,
	"SCS_PIF_BINARY":   3,
	"SCS_POSIX_BINARY": 4,
	"SCS_OS216_BINARY": 5,
	"SCS_64BIT_BINARY": 6,
}

func (x BinaryTypeResponse_Win32BinaryType) Enum() *BinaryTypeResponse_Win32BinaryType {
	p := new(BinaryTypeResponse_Win32BinaryType)
	*p = x
	return p
}
func (x BinaryTypeResponse_Win32BinaryType) String() string {
	return proto.EnumName(BinaryTypeResponse_Win32BinaryType_name, int32(x))
}
func (x *BinaryTypeResponse_Win32BinaryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BinaryTypeResponse_Win32BinaryType_value, data, "BinaryTypeResponse_Win32BinaryType")
	if err != nil {
		return err
	}
	*x = BinaryTypeResponse_Win32BinaryType(value)
	return nil
}
func (BinaryTypeResponse_Win32BinaryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorLocal, []int{7, 0}
}

type LocalEnvironment struct {
	Empty            *bool                        `protobuf:"varint,1,opt,name=empty" json:"empty,omitempty"`
	Variable         []*LocalEnvironment_Variable `protobuf:"bytes,2,rep,name=variable" json:"variable,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *LocalEnvironment) Reset()                    { *m = LocalEnvironment{} }
func (m *LocalEnvironment) String() string            { return proto.CompactTextString(m) }
func (*LocalEnvironment) ProtoMessage()               {}
func (*LocalEnvironment) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{0} }

func (m *LocalEnvironment) GetEmpty() bool {
	if m != nil && m.Empty != nil {
		return *m.Empty
	}
	return false
}

func (m *LocalEnvironment) GetVariable() []*LocalEnvironment_Variable {
	if m != nil {
		return m.Variable
	}
	return nil
}

type LocalEnvironment_Variable struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Expand           *bool   `protobuf:"varint,3,opt,name=expand" json:"expand,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LocalEnvironment_Variable) Reset()         { *m = LocalEnvironment_Variable{} }
func (m *LocalEnvironment_Variable) String() string { return proto.CompactTextString(m) }
func (*LocalEnvironment_Variable) ProtoMessage()    {}
func (*LocalEnvironment_Variable) Descriptor() ([]byte, []int) {
	return fileDescriptorLocal, []int{0, 0}
}

func (m *LocalEnvironment_Variable) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *LocalEnvironment_Variable) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *LocalEnvironment_Variable) GetExpand() bool {
	if m != nil && m.Expand != nil {
		return *m.Expand
	}
	return false
}

type LocalExecutionParameters struct {
	ApplicationName       *string             `protobuf:"bytes,1,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	CommandLine           *string             `protobuf:"bytes,2,opt,name=command_line,json=commandLine" json:"command_line,omitempty"`
	CurrentDirectory      *string             `protobuf:"bytes,3,opt,name=current_directory,json=currentDirectory" json:"current_directory,omitempty"`
	TimeLimitMicros       *uint64             `protobuf:"varint,4,opt,name=time_limit_micros,json=timeLimitMicros" json:"time_limit_micros,omitempty"`
	MemoryLimit           *uint64             `protobuf:"varint,5,opt,name=memory_limit,json=memoryLimit" json:"memory_limit,omitempty"`
	CheckIdleness         *bool               `protobuf:"varint,6,opt,name=check_idleness,json=checkIdleness" json:"check_idleness,omitempty"`
	Environment           *LocalEnvironment   `protobuf:"bytes,7,opt,name=environment" json:"environment,omitempty"`
	RestrictUi            *bool               `protobuf:"varint,8,opt,name=restrict_ui,json=restrictUi" json:"restrict_ui,omitempty"`
	NoJob                 *bool               `protobuf:"varint,9,opt,name=no_job,json=noJob" json:"no_job,omitempty"`
	ProcessLimit          *uint32             `protobuf:"varint,10,opt,name=process_limit,json=processLimit" json:"process_limit,omitempty"`
	TimeLimitHardMicros   *uint64             `protobuf:"varint,15,opt,name=time_limit_hard_micros,json=timeLimitHardMicros" json:"time_limit_hard_micros,omitempty"`
	StdIn                 *RedirectParameters `protobuf:"bytes,12,opt,name=std_in,json=stdIn" json:"std_in,omitempty"`
	StdOut                *RedirectParameters `protobuf:"bytes,13,opt,name=std_out,json=stdOut" json:"std_out,omitempty"`
	StdErr                *RedirectParameters `protobuf:"bytes,14,opt,name=std_err,json=stdErr" json:"std_err,omitempty"`
	CommandLineParameters []string            `protobuf:"bytes,16,rep,name=command_line_parameters,json=commandLineParameters" json:"command_line_parameters,omitempty"`
	SandboxId             *string             `protobuf:"bytes,17,opt,name=sandbox_id,json=sandboxId" json:"sandbox_id,omitempty"`
	JoinStdoutStderr      *bool               `protobuf:"varint,18,opt,name=join_stdout_stderr,json=joinStdoutStderr" json:"join_stdout_stderr,omitempty"`
	XXX_unrecognized      []byte              `json:"-"`
}

func (m *LocalExecutionParameters) Reset()                    { *m = LocalExecutionParameters{} }
func (m *LocalExecutionParameters) String() string            { return proto.CompactTextString(m) }
func (*LocalExecutionParameters) ProtoMessage()               {}
func (*LocalExecutionParameters) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{1} }

func (m *LocalExecutionParameters) GetApplicationName() string {
	if m != nil && m.ApplicationName != nil {
		return *m.ApplicationName
	}
	return ""
}

func (m *LocalExecutionParameters) GetCommandLine() string {
	if m != nil && m.CommandLine != nil {
		return *m.CommandLine
	}
	return ""
}

func (m *LocalExecutionParameters) GetCurrentDirectory() string {
	if m != nil && m.CurrentDirectory != nil {
		return *m.CurrentDirectory
	}
	return ""
}

func (m *LocalExecutionParameters) GetTimeLimitMicros() uint64 {
	if m != nil && m.TimeLimitMicros != nil {
		return *m.TimeLimitMicros
	}
	return 0
}

func (m *LocalExecutionParameters) GetMemoryLimit() uint64 {
	if m != nil && m.MemoryLimit != nil {
		return *m.MemoryLimit
	}
	return 0
}

func (m *LocalExecutionParameters) GetCheckIdleness() bool {
	if m != nil && m.CheckIdleness != nil {
		return *m.CheckIdleness
	}
	return false
}

func (m *LocalExecutionParameters) GetEnvironment() *LocalEnvironment {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *LocalExecutionParameters) GetRestrictUi() bool {
	if m != nil && m.RestrictUi != nil {
		return *m.RestrictUi
	}
	return false
}

func (m *LocalExecutionParameters) GetNoJob() bool {
	if m != nil && m.NoJob != nil {
		return *m.NoJob
	}
	return false
}

func (m *LocalExecutionParameters) GetProcessLimit() uint32 {
	if m != nil && m.ProcessLimit != nil {
		return *m.ProcessLimit
	}
	return 0
}

func (m *LocalExecutionParameters) GetTimeLimitHardMicros() uint64 {
	if m != nil && m.TimeLimitHardMicros != nil {
		return *m.TimeLimitHardMicros
	}
	return 0
}

func (m *LocalExecutionParameters) GetStdIn() *RedirectParameters {
	if m != nil {
		return m.StdIn
	}
	return nil
}

func (m *LocalExecutionParameters) GetStdOut() *RedirectParameters {
	if m != nil {
		return m.StdOut
	}
	return nil
}

func (m *LocalExecutionParameters) GetStdErr() *RedirectParameters {
	if m != nil {
		return m.StdErr
	}
	return nil
}

func (m *LocalExecutionParameters) GetCommandLineParameters() []string {
	if m != nil {
		return m.CommandLineParameters
	}
	return nil
}

func (m *LocalExecutionParameters) GetSandboxId() string {
	if m != nil && m.SandboxId != nil {
		return *m.SandboxId
	}
	return ""
}

func (m *LocalExecutionParameters) GetJoinStdoutStderr() bool {
	if m != nil && m.JoinStdoutStderr != nil {
		return *m.JoinStdoutStderr
	}
	return false
}

type LocalExecuteConnected struct {
	First            *LocalExecutionParameters `protobuf:"bytes,1,opt,name=first" json:"first,omitempty"`
	Second           *LocalExecutionParameters `protobuf:"bytes,2,opt,name=second" json:"second,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *LocalExecuteConnected) Reset()                    { *m = LocalExecuteConnected{} }
func (m *LocalExecuteConnected) String() string            { return proto.CompactTextString(m) }
func (*LocalExecuteConnected) ProtoMessage()               {}
func (*LocalExecuteConnected) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{2} }

func (m *LocalExecuteConnected) GetFirst() *LocalExecutionParameters {
	if m != nil {
		return m.First
	}
	return nil
}

func (m *LocalExecuteConnected) GetSecond() *LocalExecutionParameters {
	if m != nil {
		return m.Second
	}
	return nil
}

type LocalExecutionResult struct {
	Flags            *ExecutionResultFlags `protobuf:"bytes,1,opt,name=flags" json:"flags,omitempty"`
	Time             *ExecutionResultTime  `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	Memory           *uint64               `protobuf:"varint,3,opt,name=memory" json:"memory,omitempty"`
	ReturnCode       *uint32               `protobuf:"varint,4,opt,name=return_code,json=returnCode" json:"return_code,omitempty"`
	StdOut           *Blob                 `protobuf:"bytes,5,opt,name=std_out,json=stdOut" json:"std_out,omitempty"`
	StdErr           *Blob                 `protobuf:"bytes,6,opt,name=std_err,json=stdErr" json:"std_err,omitempty"`
	TotalProcesses   *uint64               `protobuf:"varint,7,opt,name=total_processes,json=totalProcesses" json:"total_processes,omitempty"`
	KillSignal       *int32                `protobuf:"varint,8,opt,name=kill_signal,json=killSignal" json:"kill_signal,omitempty"`
	StopSignal       *int32                `protobuf:"varint,9,opt,name=stop_signal,json=stopSignal" json:"stop_signal,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *LocalExecutionResult) Reset()                    { *m = LocalExecutionResult{} }
func (m *LocalExecutionResult) String() string            { return proto.CompactTextString(m) }
func (*LocalExecutionResult) ProtoMessage()               {}
func (*LocalExecutionResult) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{3} }

func (m *LocalExecutionResult) GetFlags() *ExecutionResultFlags {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *LocalExecutionResult) GetTime() *ExecutionResultTime {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *LocalExecutionResult) GetMemory() uint64 {
	if m != nil && m.Memory != nil {
		return *m.Memory
	}
	return 0
}

func (m *LocalExecutionResult) GetReturnCode() uint32 {
	if m != nil && m.ReturnCode != nil {
		return *m.ReturnCode
	}
	return 0
}

func (m *LocalExecutionResult) GetStdOut() *Blob {
	if m != nil {
		return m.StdOut
	}
	return nil
}

func (m *LocalExecutionResult) GetStdErr() *Blob {
	if m != nil {
		return m.StdErr
	}
	return nil
}

func (m *LocalExecutionResult) GetTotalProcesses() uint64 {
	if m != nil && m.TotalProcesses != nil {
		return *m.TotalProcesses
	}
	return 0
}

func (m *LocalExecutionResult) GetKillSignal() int32 {
	if m != nil && m.KillSignal != nil {
		return *m.KillSignal
	}
	return 0
}

func (m *LocalExecutionResult) GetStopSignal() int32 {
	if m != nil && m.StopSignal != nil {
		return *m.StopSignal
	}
	return 0
}

type LocalExecuteConnectedResult struct {
	First            *LocalExecutionResult `protobuf:"bytes,1,opt,name=first" json:"first,omitempty"`
	Second           *LocalExecutionResult `protobuf:"bytes,2,opt,name=second" json:"second,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *LocalExecuteConnectedResult) Reset()                    { *m = LocalExecuteConnectedResult{} }
func (m *LocalExecuteConnectedResult) String() string            { return proto.CompactTextString(m) }
func (*LocalExecuteConnectedResult) ProtoMessage()               {}
func (*LocalExecuteConnectedResult) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{4} }

func (m *LocalExecuteConnectedResult) GetFirst() *LocalExecutionResult {
	if m != nil {
		return m.First
	}
	return nil
}

func (m *LocalExecuteConnectedResult) GetSecond() *LocalExecutionResult {
	if m != nil {
		return m.Second
	}
	return nil
}

type LocalExecution struct {
	Parameters       *LocalExecutionParameters `protobuf:"bytes,1,req,name=parameters" json:"parameters,omitempty"`
	Result           *LocalExecutionResult     `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *LocalExecution) Reset()                    { *m = LocalExecution{} }
func (m *LocalExecution) String() string            { return proto.CompactTextString(m) }
func (*LocalExecution) ProtoMessage()               {}
func (*LocalExecution) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{5} }

func (m *LocalExecution) GetParameters() *LocalExecutionParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *LocalExecution) GetResult() *LocalExecutionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type BinaryTypeRequest struct {
	Pathname         *string `protobuf:"bytes,1,opt,name=pathname" json:"pathname,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BinaryTypeRequest) Reset()                    { *m = BinaryTypeRequest{} }
func (m *BinaryTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*BinaryTypeRequest) ProtoMessage()               {}
func (*BinaryTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{6} }

func (m *BinaryTypeRequest) GetPathname() string {
	if m != nil && m.Pathname != nil {
		return *m.Pathname
	}
	return ""
}

type BinaryTypeResponse struct {
	Failure          *bool                               `protobuf:"varint,1,opt,name=failure" json:"failure,omitempty"`
	Result           *BinaryTypeResponse_Win32BinaryType `protobuf:"varint,2,opt,name=result,enum=contester.proto.BinaryTypeResponse_Win32BinaryType" json:"result,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *BinaryTypeResponse) Reset()                    { *m = BinaryTypeResponse{} }
func (m *BinaryTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*BinaryTypeResponse) ProtoMessage()               {}
func (*BinaryTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{7} }

func (m *BinaryTypeResponse) GetFailure() bool {
	if m != nil && m.Failure != nil {
		return *m.Failure
	}
	return false
}

func (m *BinaryTypeResponse) GetResult() BinaryTypeResponse_Win32BinaryType {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return BinaryTypeResponse_SCS_32BIT_BINARY
}

type ClearSandboxRequest struct {
	Sandbox          *string `protobuf:"bytes,1,opt,name=sandbox" json:"sandbox,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ClearSandboxRequest) Reset()                    { *m = ClearSandboxRequest{} }
func (m *ClearSandboxRequest) String() string            { return proto.CompactTextString(m) }
func (*ClearSandboxRequest) ProtoMessage()               {}
func (*ClearSandboxRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{8} }

func (m *ClearSandboxRequest) GetSandbox() string {
	if m != nil && m.Sandbox != nil {
		return *m.Sandbox
	}
	return ""
}

type IdentifyRequest struct {
	ContesterId      *string `protobuf:"bytes,1,opt,name=contester_id,json=contesterId" json:"contester_id,omitempty"`
	MongoHost        *string `protobuf:"bytes,2,opt,name=mongo_host,json=mongoHost" json:"mongo_host,omitempty"`
	MongoDb          *string `protobuf:"bytes,3,opt,name=mongo_db,json=mongoDb" json:"mongo_db,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IdentifyRequest) Reset()                    { *m = IdentifyRequest{} }
func (m *IdentifyRequest) String() string            { return proto.CompactTextString(m) }
func (*IdentifyRequest) ProtoMessage()               {}
func (*IdentifyRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{9} }

func (m *IdentifyRequest) GetContesterId() string {
	if m != nil && m.ContesterId != nil {
		return *m.ContesterId
	}
	return ""
}

func (m *IdentifyRequest) GetMongoHost() string {
	if m != nil && m.MongoHost != nil {
		return *m.MongoHost
	}
	return ""
}

func (m *IdentifyRequest) GetMongoDb() string {
	if m != nil && m.MongoDb != nil {
		return *m.MongoDb
	}
	return ""
}

type SandboxLocations struct {
	Compile          *string `protobuf:"bytes,1,opt,name=compile" json:"compile,omitempty"`
	Run              *string `protobuf:"bytes,2,opt,name=run" json:"run,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SandboxLocations) Reset()                    { *m = SandboxLocations{} }
func (m *SandboxLocations) String() string            { return proto.CompactTextString(m) }
func (*SandboxLocations) ProtoMessage()               {}
func (*SandboxLocations) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{10} }

func (m *SandboxLocations) GetCompile() string {
	if m != nil && m.Compile != nil {
		return *m.Compile
	}
	return ""
}

func (m *SandboxLocations) GetRun() string {
	if m != nil && m.Run != nil {
		return *m.Run
	}
	return ""
}

type IdentifyResponse struct {
	InvokerId        *string             `protobuf:"bytes,1,opt,name=invoker_id,json=invokerId" json:"invoker_id,omitempty"`
	Sandboxes        []*SandboxLocations `protobuf:"bytes,2,rep,name=sandboxes" json:"sandboxes,omitempty"`
	Environment      *LocalEnvironment   `protobuf:"bytes,3,opt,name=environment" json:"environment,omitempty"`
	Platform         *string             `protobuf:"bytes,4,opt,name=platform" json:"platform,omitempty"`
	PathSeparator    *string             `protobuf:"bytes,5,opt,name=path_separator,json=pathSeparator" json:"path_separator,omitempty"`
	Disks            []string            `protobuf:"bytes,6,rep,name=disks" json:"disks,omitempty"`
	ProgramFiles     []string            `protobuf:"bytes,7,rep,name=programFiles" json:"programFiles,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *IdentifyResponse) Reset()                    { *m = IdentifyResponse{} }
func (m *IdentifyResponse) String() string            { return proto.CompactTextString(m) }
func (*IdentifyResponse) ProtoMessage()               {}
func (*IdentifyResponse) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{11} }

func (m *IdentifyResponse) GetInvokerId() string {
	if m != nil && m.InvokerId != nil {
		return *m.InvokerId
	}
	return ""
}

func (m *IdentifyResponse) GetSandboxes() []*SandboxLocations {
	if m != nil {
		return m.Sandboxes
	}
	return nil
}

func (m *IdentifyResponse) GetEnvironment() *LocalEnvironment {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *IdentifyResponse) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *IdentifyResponse) GetPathSeparator() string {
	if m != nil && m.PathSeparator != nil {
		return *m.PathSeparator
	}
	return ""
}

func (m *IdentifyResponse) GetDisks() []string {
	if m != nil {
		return m.Disks
	}
	return nil
}

func (m *IdentifyResponse) GetProgramFiles() []string {
	if m != nil {
		return m.ProgramFiles
	}
	return nil
}

type FileStat struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	IsDirectory      *bool   `protobuf:"varint,2,opt,name=is_directory,json=isDirectory" json:"is_directory,omitempty"`
	Size_            *uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Checksum         *string `protobuf:"bytes,4,opt,name=checksum" json:"checksum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileStat) Reset()                    { *m = FileStat{} }
func (m *FileStat) String() string            { return proto.CompactTextString(m) }
func (*FileStat) ProtoMessage()               {}
func (*FileStat) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{12} }

func (m *FileStat) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FileStat) GetIsDirectory() bool {
	if m != nil && m.IsDirectory != nil {
		return *m.IsDirectory
	}
	return false
}

func (m *FileStat) GetSize_() uint64 {
	if m != nil && m.Size_ != nil {
		return *m.Size_
	}
	return 0
}

func (m *FileStat) GetChecksum() string {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return ""
}

type StatRequest struct {
	Name              []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	SandboxId         *string  `protobuf:"bytes,2,opt,name=sandbox_id,json=sandboxId" json:"sandbox_id,omitempty"`
	Expand            *bool    `protobuf:"varint,3,opt,name=expand" json:"expand,omitempty"`
	CalculateChecksum *bool    `protobuf:"varint,4,opt,name=calculate_checksum,json=calculateChecksum" json:"calculate_checksum,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *StatRequest) Reset()                    { *m = StatRequest{} }
func (m *StatRequest) String() string            { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()               {}
func (*StatRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{13} }

func (m *StatRequest) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *StatRequest) GetSandboxId() string {
	if m != nil && m.SandboxId != nil {
		return *m.SandboxId
	}
	return ""
}

func (m *StatRequest) GetExpand() bool {
	if m != nil && m.Expand != nil {
		return *m.Expand
	}
	return false
}

func (m *StatRequest) GetCalculateChecksum() bool {
	if m != nil && m.CalculateChecksum != nil {
		return *m.CalculateChecksum
	}
	return false
}

type FileStats struct {
	Entries          []*FileStat `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *FileStats) Reset()                    { *m = FileStats{} }
func (m *FileStats) String() string            { return proto.CompactTextString(m) }
func (*FileStats) ProtoMessage()               {}
func (*FileStats) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{14} }

func (m *FileStats) GetEntries() []*FileStat {
	if m != nil {
		return m.Entries
	}
	return nil
}

type GetRequest struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{15} }

func (m *GetRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type EmptyMessage struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{16} }

type CopyOperation struct {
	LocalFileName      *string `protobuf:"bytes,1,opt,name=local_file_name,json=localFileName" json:"local_file_name,omitempty"`
	RemoteLocation     *string `protobuf:"bytes,2,opt,name=remote_location,json=remoteLocation" json:"remote_location,omitempty"`
	Upload             *bool   `protobuf:"varint,3,opt,name=upload" json:"upload,omitempty"`
	Checksum           *string `protobuf:"bytes,4,opt,name=checksum" json:"checksum,omitempty"`
	ModuleType         *string `protobuf:"bytes,5,opt,name=module_type,json=moduleType" json:"module_type,omitempty"`
	AuthorizationToken *string `protobuf:"bytes,6,opt,name=authorization_token,json=authorizationToken" json:"authorization_token,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *CopyOperation) Reset()                    { *m = CopyOperation{} }
func (m *CopyOperation) String() string            { return proto.CompactTextString(m) }
func (*CopyOperation) ProtoMessage()               {}
func (*CopyOperation) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{17} }

func (m *CopyOperation) GetLocalFileName() string {
	if m != nil && m.LocalFileName != nil {
		return *m.LocalFileName
	}
	return ""
}

func (m *CopyOperation) GetRemoteLocation() string {
	if m != nil && m.RemoteLocation != nil {
		return *m.RemoteLocation
	}
	return ""
}

func (m *CopyOperation) GetUpload() bool {
	if m != nil && m.Upload != nil {
		return *m.Upload
	}
	return false
}

func (m *CopyOperation) GetChecksum() string {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return ""
}

func (m *CopyOperation) GetModuleType() string {
	if m != nil && m.ModuleType != nil {
		return *m.ModuleType
	}
	return ""
}

func (m *CopyOperation) GetAuthorizationToken() string {
	if m != nil && m.AuthorizationToken != nil {
		return *m.AuthorizationToken
	}
	return ""
}

type CopyOperations struct {
	Entries          []*CopyOperation `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	SandboxId        *string          `protobuf:"bytes,2,opt,name=sandbox_id,json=sandboxId" json:"sandbox_id,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CopyOperations) Reset()                    { *m = CopyOperations{} }
func (m *CopyOperations) String() string            { return proto.CompactTextString(m) }
func (*CopyOperations) ProtoMessage()               {}
func (*CopyOperations) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{18} }

func (m *CopyOperations) GetEntries() []*CopyOperation {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *CopyOperations) GetSandboxId() string {
	if m != nil && m.SandboxId != nil {
		return *m.SandboxId
	}
	return ""
}

type NamePair struct {
	Source           *string `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
	Destination      *string `protobuf:"bytes,2,req,name=destination" json:"destination,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NamePair) Reset()                    { *m = NamePair{} }
func (m *NamePair) String() string            { return proto.CompactTextString(m) }
func (*NamePair) ProtoMessage()               {}
func (*NamePair) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{19} }

func (m *NamePair) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *NamePair) GetDestination() string {
	if m != nil && m.Destination != nil {
		return *m.Destination
	}
	return ""
}

type RepeatedNamePairEntries struct {
	Entries          []*NamePair `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	SandboxId        *string     `protobuf:"bytes,2,opt,name=sandbox_id,json=sandboxId" json:"sandbox_id,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RepeatedNamePairEntries) Reset()                    { *m = RepeatedNamePairEntries{} }
func (m *RepeatedNamePairEntries) String() string            { return proto.CompactTextString(m) }
func (*RepeatedNamePairEntries) ProtoMessage()               {}
func (*RepeatedNamePairEntries) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{20} }

func (m *RepeatedNamePairEntries) GetEntries() []*NamePair {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *RepeatedNamePairEntries) GetSandboxId() string {
	if m != nil && m.SandboxId != nil {
		return *m.SandboxId
	}
	return ""
}

type RepeatedStringEntries struct {
	Entries          []string `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RepeatedStringEntries) Reset()                    { *m = RepeatedStringEntries{} }
func (m *RepeatedStringEntries) String() string            { return proto.CompactTextString(m) }
func (*RepeatedStringEntries) ProtoMessage()               {}
func (*RepeatedStringEntries) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{21} }

func (m *RepeatedStringEntries) GetEntries() []string {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*LocalEnvironment)(nil), "contester.proto.LocalEnvironment")
	proto.RegisterType((*LocalEnvironment_Variable)(nil), "contester.proto.LocalEnvironment.Variable")
	proto.RegisterType((*LocalExecutionParameters)(nil), "contester.proto.LocalExecutionParameters")
	proto.RegisterType((*LocalExecuteConnected)(nil), "contester.proto.LocalExecuteConnected")
	proto.RegisterType((*LocalExecutionResult)(nil), "contester.proto.LocalExecutionResult")
	proto.RegisterType((*LocalExecuteConnectedResult)(nil), "contester.proto.LocalExecuteConnectedResult")
	proto.RegisterType((*LocalExecution)(nil), "contester.proto.LocalExecution")
	proto.RegisterType((*BinaryTypeRequest)(nil), "contester.proto.BinaryTypeRequest")
	proto.RegisterType((*BinaryTypeResponse)(nil), "contester.proto.BinaryTypeResponse")
	proto.RegisterType((*ClearSandboxRequest)(nil), "contester.proto.ClearSandboxRequest")
	proto.RegisterType((*IdentifyRequest)(nil), "contester.proto.IdentifyRequest")
	proto.RegisterType((*SandboxLocations)(nil), "contester.proto.SandboxLocations")
	proto.RegisterType((*IdentifyResponse)(nil), "contester.proto.IdentifyResponse")
	proto.RegisterType((*FileStat)(nil), "contester.proto.FileStat")
	proto.RegisterType((*StatRequest)(nil), "contester.proto.StatRequest")
	proto.RegisterType((*FileStats)(nil), "contester.proto.FileStats")
	proto.RegisterType((*GetRequest)(nil), "contester.proto.GetRequest")
	proto.RegisterType((*EmptyMessage)(nil), "contester.proto.EmptyMessage")
	proto.RegisterType((*CopyOperation)(nil), "contester.proto.CopyOperation")
	proto.RegisterType((*CopyOperations)(nil), "contester.proto.CopyOperations")
	proto.RegisterType((*NamePair)(nil), "contester.proto.NamePair")
	proto.RegisterType((*RepeatedNamePairEntries)(nil), "contester.proto.RepeatedNamePairEntries")
	proto.RegisterType((*RepeatedStringEntries)(nil), "contester.proto.RepeatedStringEntries")
	proto.RegisterEnum("contester.proto.BinaryTypeResponse_Win32BinaryType", BinaryTypeResponse_Win32BinaryType_name, BinaryTypeResponse_Win32BinaryType_value)
}
func (m *LocalEnvironment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LocalEnvironment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Empty != nil {
		data[i] = 0x8
		i++
		if *m.Empty {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Variable) > 0 {
		for _, msg := range m.Variable {
			data[i] = 0x12
			i++
			i = encodeVarintLocal(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalEnvironment_Variable) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LocalEnvironment_Variable) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.Value != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Value)))
		i += copy(data[i:], *m.Value)
	}
	if m.Expand != nil {
		data[i] = 0x18
		i++
		if *m.Expand {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalExecutionParameters) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LocalExecutionParameters) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApplicationName != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.ApplicationName)))
		i += copy(data[i:], *m.ApplicationName)
	}
	if m.CommandLine != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.CommandLine)))
		i += copy(data[i:], *m.CommandLine)
	}
	if m.CurrentDirectory != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.CurrentDirectory)))
		i += copy(data[i:], *m.CurrentDirectory)
	}
	if m.TimeLimitMicros != nil {
		data[i] = 0x20
		i++
		i = encodeVarintLocal(data, i, uint64(*m.TimeLimitMicros))
	}
	if m.MemoryLimit != nil {
		data[i] = 0x28
		i++
		i = encodeVarintLocal(data, i, uint64(*m.MemoryLimit))
	}
	if m.CheckIdleness != nil {
		data[i] = 0x30
		i++
		if *m.CheckIdleness {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Environment != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintLocal(data, i, uint64(m.Environment.Size()))
		n1, err := m.Environment.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.RestrictUi != nil {
		data[i] = 0x40
		i++
		if *m.RestrictUi {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.NoJob != nil {
		data[i] = 0x48
		i++
		if *m.NoJob {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.ProcessLimit != nil {
		data[i] = 0x50
		i++
		i = encodeVarintLocal(data, i, uint64(*m.ProcessLimit))
	}
	if m.StdIn != nil {
		data[i] = 0x62
		i++
		i = encodeVarintLocal(data, i, uint64(m.StdIn.Size()))
		n2, err := m.StdIn.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.StdOut != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintLocal(data, i, uint64(m.StdOut.Size()))
		n3, err := m.StdOut.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.StdErr != nil {
		data[i] = 0x72
		i++
		i = encodeVarintLocal(data, i, uint64(m.StdErr.Size()))
		n4, err := m.StdErr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.TimeLimitHardMicros != nil {
		data[i] = 0x78
		i++
		i = encodeVarintLocal(data, i, uint64(*m.TimeLimitHardMicros))
	}
	if len(m.CommandLineParameters) > 0 {
		for _, s := range m.CommandLineParameters {
			data[i] = 0x82
			i++
			data[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.SandboxId != nil {
		data[i] = 0x8a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.SandboxId)))
		i += copy(data[i:], *m.SandboxId)
	}
	if m.JoinStdoutStderr != nil {
		data[i] = 0x90
		i++
		data[i] = 0x1
		i++
		if *m.JoinStdoutStderr {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalExecuteConnected) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LocalExecuteConnected) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.First != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(m.First.Size()))
		n5, err := m.First.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Second != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(m.Second.Size()))
		n6, err := m.Second.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalExecutionResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LocalExecutionResult) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(m.Flags.Size()))
		n7, err := m.Flags.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Time != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(m.Time.Size()))
		n8, err := m.Time.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Memory != nil {
		data[i] = 0x18
		i++
		i = encodeVarintLocal(data, i, uint64(*m.Memory))
	}
	if m.ReturnCode != nil {
		data[i] = 0x20
		i++
		i = encodeVarintLocal(data, i, uint64(*m.ReturnCode))
	}
	if m.StdOut != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintLocal(data, i, uint64(m.StdOut.Size()))
		n9, err := m.StdOut.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.StdErr != nil {
		data[i] = 0x32
		i++
		i = encodeVarintLocal(data, i, uint64(m.StdErr.Size()))
		n10, err := m.StdErr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.TotalProcesses != nil {
		data[i] = 0x38
		i++
		i = encodeVarintLocal(data, i, uint64(*m.TotalProcesses))
	}
	if m.KillSignal != nil {
		data[i] = 0x40
		i++
		i = encodeVarintLocal(data, i, uint64(*m.KillSignal))
	}
	if m.StopSignal != nil {
		data[i] = 0x48
		i++
		i = encodeVarintLocal(data, i, uint64(*m.StopSignal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalExecuteConnectedResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LocalExecuteConnectedResult) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.First != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(m.First.Size()))
		n11, err := m.First.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Second != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(m.Second.Size()))
		n12, err := m.Second.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocalExecution) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LocalExecution) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parameters == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(m.Parameters.Size()))
		n13, err := m.Parameters.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Result != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(m.Result.Size()))
		n14, err := m.Result.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BinaryTypeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BinaryTypeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pathname != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Pathname)))
		i += copy(data[i:], *m.Pathname)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BinaryTypeResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BinaryTypeResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		data[i] = 0x8
		i++
		if *m.Failure {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Result != nil {
		data[i] = 0x10
		i++
		i = encodeVarintLocal(data, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClearSandboxRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ClearSandboxRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sandbox != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Sandbox)))
		i += copy(data[i:], *m.Sandbox)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IdentifyRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IdentifyRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContesterId != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.ContesterId)))
		i += copy(data[i:], *m.ContesterId)
	}
	if m.MongoHost != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.MongoHost)))
		i += copy(data[i:], *m.MongoHost)
	}
	if m.MongoDb != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.MongoDb)))
		i += copy(data[i:], *m.MongoDb)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SandboxLocations) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SandboxLocations) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Compile != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Compile)))
		i += copy(data[i:], *m.Compile)
	}
	if m.Run != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Run)))
		i += copy(data[i:], *m.Run)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IdentifyResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IdentifyResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvokerId != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.InvokerId)))
		i += copy(data[i:], *m.InvokerId)
	}
	if len(m.Sandboxes) > 0 {
		for _, msg := range m.Sandboxes {
			data[i] = 0x12
			i++
			i = encodeVarintLocal(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Environment != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintLocal(data, i, uint64(m.Environment.Size()))
		n15, err := m.Environment.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Platform != nil {
		data[i] = 0x22
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Platform)))
		i += copy(data[i:], *m.Platform)
	}
	if m.PathSeparator != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.PathSeparator)))
		i += copy(data[i:], *m.PathSeparator)
	}
	if len(m.Disks) > 0 {
		for _, s := range m.Disks {
			data[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.ProgramFiles) > 0 {
		for _, s := range m.ProgramFiles {
			data[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FileStat) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FileStat) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.IsDirectory != nil {
		data[i] = 0x10
		i++
		if *m.IsDirectory {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Size_ != nil {
		data[i] = 0x18
		i++
		i = encodeVarintLocal(data, i, uint64(*m.Size_))
	}
	if m.Checksum != nil {
		data[i] = 0x22
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Checksum)))
		i += copy(data[i:], *m.Checksum)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.SandboxId != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.SandboxId)))
		i += copy(data[i:], *m.SandboxId)
	}
	if m.Expand != nil {
		data[i] = 0x18
		i++
		if *m.Expand {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.CalculateChecksum != nil {
		data[i] = 0x20
		i++
		if *m.CalculateChecksum {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FileStats) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FileStats) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			data[i] = 0xa
			i++
			i = encodeVarintLocal(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EmptyMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmptyMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CopyOperation) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CopyOperation) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LocalFileName != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.LocalFileName)))
		i += copy(data[i:], *m.LocalFileName)
	}
	if m.RemoteLocation != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.RemoteLocation)))
		i += copy(data[i:], *m.RemoteLocation)
	}
	if m.Upload != nil {
		data[i] = 0x18
		i++
		if *m.Upload {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Checksum != nil {
		data[i] = 0x22
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Checksum)))
		i += copy(data[i:], *m.Checksum)
	}
	if m.ModuleType != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.ModuleType)))
		i += copy(data[i:], *m.ModuleType)
	}
	if m.AuthorizationToken != nil {
		data[i] = 0x32
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.AuthorizationToken)))
		i += copy(data[i:], *m.AuthorizationToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CopyOperations) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CopyOperations) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			data[i] = 0xa
			i++
			i = encodeVarintLocal(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SandboxId != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.SandboxId)))
		i += copy(data[i:], *m.SandboxId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NamePair) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NamePair) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Source == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Source)))
		i += copy(data[i:], *m.Source)
	}
	if m.Destination == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.Destination)))
		i += copy(data[i:], *m.Destination)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RepeatedNamePairEntries) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RepeatedNamePairEntries) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			data[i] = 0xa
			i++
			i = encodeVarintLocal(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SandboxId != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(*m.SandboxId)))
		i += copy(data[i:], *m.SandboxId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RepeatedStringEntries) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RepeatedStringEntries) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, s := range m.Entries {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Local(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Local(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLocal(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *LocalEnvironment) Size() (n int) {
	var l int
	_ = l
	if m.Empty != nil {
		n += 2
	}
	if len(m.Variable) > 0 {
		for _, e := range m.Variable {
			l = e.Size()
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalEnvironment_Variable) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Expand != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalExecutionParameters) Size() (n int) {
	var l int
	_ = l
	if m.ApplicationName != nil {
		l = len(*m.ApplicationName)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.CommandLine != nil {
		l = len(*m.CommandLine)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.CurrentDirectory != nil {
		l = len(*m.CurrentDirectory)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.TimeLimitMicros != nil {
		n += 1 + sovLocal(uint64(*m.TimeLimitMicros))
	}
	if m.MemoryLimit != nil {
		n += 1 + sovLocal(uint64(*m.MemoryLimit))
	}
	if m.CheckIdleness != nil {
		n += 2
	}
	if m.Environment != nil {
		l = m.Environment.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.RestrictUi != nil {
		n += 2
	}
	if m.NoJob != nil {
		n += 2
	}
	if m.ProcessLimit != nil {
		n += 1 + sovLocal(uint64(*m.ProcessLimit))
	}
	if m.StdIn != nil {
		l = m.StdIn.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.StdOut != nil {
		l = m.StdOut.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.StdErr != nil {
		l = m.StdErr.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.TimeLimitHardMicros != nil {
		n += 1 + sovLocal(uint64(*m.TimeLimitHardMicros))
	}
	if len(m.CommandLineParameters) > 0 {
		for _, s := range m.CommandLineParameters {
			l = len(s)
			n += 2 + l + sovLocal(uint64(l))
		}
	}
	if m.SandboxId != nil {
		l = len(*m.SandboxId)
		n += 2 + l + sovLocal(uint64(l))
	}
	if m.JoinStdoutStderr != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalExecuteConnected) Size() (n int) {
	var l int
	_ = l
	if m.First != nil {
		l = m.First.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Second != nil {
		l = m.Second.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalExecutionResult) Size() (n int) {
	var l int
	_ = l
	if m.Flags != nil {
		l = m.Flags.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Memory != nil {
		n += 1 + sovLocal(uint64(*m.Memory))
	}
	if m.ReturnCode != nil {
		n += 1 + sovLocal(uint64(*m.ReturnCode))
	}
	if m.StdOut != nil {
		l = m.StdOut.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.StdErr != nil {
		l = m.StdErr.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.TotalProcesses != nil {
		n += 1 + sovLocal(uint64(*m.TotalProcesses))
	}
	if m.KillSignal != nil {
		n += 1 + sovLocal(uint64(*m.KillSignal))
	}
	if m.StopSignal != nil {
		n += 1 + sovLocal(uint64(*m.StopSignal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalExecuteConnectedResult) Size() (n int) {
	var l int
	_ = l
	if m.First != nil {
		l = m.First.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Second != nil {
		l = m.Second.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalExecution) Size() (n int) {
	var l int
	_ = l
	if m.Parameters != nil {
		l = m.Parameters.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BinaryTypeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Pathname != nil {
		l = len(*m.Pathname)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BinaryTypeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Failure != nil {
		n += 2
	}
	if m.Result != nil {
		n += 1 + sovLocal(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearSandboxRequest) Size() (n int) {
	var l int
	_ = l
	if m.Sandbox != nil {
		l = len(*m.Sandbox)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IdentifyRequest) Size() (n int) {
	var l int
	_ = l
	if m.ContesterId != nil {
		l = len(*m.ContesterId)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.MongoHost != nil {
		l = len(*m.MongoHost)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.MongoDb != nil {
		l = len(*m.MongoDb)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SandboxLocations) Size() (n int) {
	var l int
	_ = l
	if m.Compile != nil {
		l = len(*m.Compile)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Run != nil {
		l = len(*m.Run)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IdentifyResponse) Size() (n int) {
	var l int
	_ = l
	if m.InvokerId != nil {
		l = len(*m.InvokerId)
		n += 1 + l + sovLocal(uint64(l))
	}
	if len(m.Sandboxes) > 0 {
		for _, e := range m.Sandboxes {
			l = e.Size()
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	if m.Environment != nil {
		l = m.Environment.Size()
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Platform != nil {
		l = len(*m.Platform)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.PathSeparator != nil {
		l = len(*m.PathSeparator)
		n += 1 + l + sovLocal(uint64(l))
	}
	if len(m.Disks) > 0 {
		for _, s := range m.Disks {
			l = len(s)
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	if len(m.ProgramFiles) > 0 {
		for _, s := range m.ProgramFiles {
			l = len(s)
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileStat) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.IsDirectory != nil {
		n += 2
	}
	if m.Size_ != nil {
		n += 1 + sovLocal(uint64(*m.Size_))
	}
	if m.Checksum != nil {
		l = len(*m.Checksum)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	if m.SandboxId != nil {
		l = len(*m.SandboxId)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Expand != nil {
		n += 2
	}
	if m.CalculateChecksum != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileStats) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EmptyMessage) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyOperation) Size() (n int) {
	var l int
	_ = l
	if m.LocalFileName != nil {
		l = len(*m.LocalFileName)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.RemoteLocation != nil {
		l = len(*m.RemoteLocation)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Upload != nil {
		n += 2
	}
	if m.Checksum != nil {
		l = len(*m.Checksum)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.ModuleType != nil {
		l = len(*m.ModuleType)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.AuthorizationToken != nil {
		l = len(*m.AuthorizationToken)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyOperations) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	if m.SandboxId != nil {
		l = len(*m.SandboxId)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NamePair) Size() (n int) {
	var l int
	_ = l
	if m.Source != nil {
		l = len(*m.Source)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Destination != nil {
		l = len(*m.Destination)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepeatedNamePairEntries) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	if m.SandboxId != nil {
		l = len(*m.SandboxId)
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepeatedStringEntries) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, s := range m.Entries {
			l = len(s)
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLocal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLocal(x uint64) (n int) {
	return sovLocal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LocalEnvironment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalEnvironment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalEnvironment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Empty = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Variable = append(m.Variable, &LocalEnvironment_Variable{})
			if err := m.Variable[len(m.Variable)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalEnvironment_Variable) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Variable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Variable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expand", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Expand = &b
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalExecutionParameters) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalExecutionParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalExecutionParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ApplicationName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandLine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.CommandLine = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.CurrentDirectory = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimitMicros", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeLimitMicros = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemoryLimit = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckIdleness", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CheckIdleness = &b
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Environment == nil {
				m.Environment = &LocalEnvironment{}
			}
			if err := m.Environment.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictUi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RestrictUi = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoJob", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NoJob = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessLimit", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessLimit = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdIn == nil {
				m.StdIn = &RedirectParameters{}
			}
			if err := m.StdIn.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdOut == nil {
				m.StdOut = &RedirectParameters{}
			}
			if err := m.StdOut.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdErr == nil {
				m.StdErr = &RedirectParameters{}
			}
			if err := m.StdErr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimitHardMicros", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeLimitHardMicros = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandLineParameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandLineParameters = append(m.CommandLineParameters, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SandboxId = &s
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinStdoutStderr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.JoinStdoutStderr = &b
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalExecuteConnected) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalExecuteConnected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalExecuteConnected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.First == nil {
				m.First = &LocalExecutionParameters{}
			}
			if err := m.First.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Second == nil {
				m.Second = &LocalExecutionParameters{}
			}
			if err := m.Second.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalExecutionResult) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalExecutionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalExecutionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flags == nil {
				m.Flags = &ExecutionResultFlags{}
			}
			if err := m.Flags.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &ExecutionResultTime{}
			}
			if err := m.Time.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Memory = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCode", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnCode = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdOut == nil {
				m.StdOut = &Blob{}
			}
			if err := m.StdOut.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdErr == nil {
				m.StdErr = &Blob{}
			}
			if err := m.StdErr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProcesses", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalProcesses = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillSignal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KillSignal = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopSignal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopSignal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalExecuteConnectedResult) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalExecuteConnectedResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalExecuteConnectedResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.First == nil {
				m.First = &LocalExecutionResult{}
			}
			if err := m.First.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Second == nil {
				m.Second = &LocalExecutionResult{}
			}
			if err := m.Second.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalExecution) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = &LocalExecutionParameters{}
			}
			if err := m.Parameters.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &LocalExecutionResult{}
			}
			if err := m.Result.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryTypeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pathname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Pathname = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryTypeResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Failure = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v BinaryTypeResponse_Win32BinaryType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (BinaryTypeResponse_Win32BinaryType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearSandboxRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearSandboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearSandboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sandbox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Sandbox = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentifyRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentifyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentifyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContesterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ContesterId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MongoHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.MongoHost = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MongoDb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.MongoDb = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SandboxLocations) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SandboxLocations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SandboxLocations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Compile = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Run", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Run = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentifyResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentifyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentifyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvokerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.InvokerId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sandboxes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sandboxes = append(m.Sandboxes, &SandboxLocations{})
			if err := m.Sandboxes[len(m.Sandboxes)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Environment == nil {
				m.Environment = &LocalEnvironment{}
			}
			if err := m.Environment.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Platform = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathSeparator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.PathSeparator = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disks = append(m.Disks, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramFiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramFiles = append(m.ProgramFiles, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileStat) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDirectory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDirectory = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Size_ = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Checksum = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SandboxId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expand", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Expand = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculateChecksum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CalculateChecksum = &b
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileStats) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &FileStat{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyOperation) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.LocalFileName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.RemoteLocation = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Upload = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Checksum = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ModuleType = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AuthorizationToken = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyOperations) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyOperations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyOperations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &CopyOperation{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SandboxId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamePair) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Source = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Destination = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedNamePairEntries) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatedNamePairEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatedNamePairEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &NamePair{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SandboxId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedStringEntries) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatedStringEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatedStringEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocal(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLocal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLocal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLocal(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLocal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocal   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorLocal = []byte{
	// 1530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x57, 0x4b, 0x73, 0x1b, 0xc7,
	0x11, 0x16, 0xf8, 0x04, 0x1a, 0xc4, 0x83, 0x23, 0x51, 0x5a, 0x29, 0x89, 0x42, 0xad, 0xa2, 0x44,
	0x52, 0x12, 0xa4, 0x44, 0xa5, 0x54, 0xa9, 0xf8, 0x29, 0xbe, 0x2c, 0xd8, 0x94, 0xc8, 0x5a, 0xd0,
	0x96, 0x7d, 0xda, 0x5a, 0x02, 0x43, 0x72, 0xc4, 0xc5, 0xce, 0x6a, 0x76, 0x97, 0x25, 0xea, 0x0f,
	0xf8, 0xec, 0x9b, 0x1f, 0x07, 0x1f, 0x5c, 0xfe, 0x07, 0x3e, 0xfb, 0xec, 0xa3, 0x7f, 0x82, 0xcb,
	0xae, 0xf2, 0xef, 0x70, 0xf7, 0xec, 0x0c, 0xb0, 0x00, 0x24, 0x93, 0xf4, 0x01, 0xc5, 0xed, 0x6f,
	0xba, 0xa7, 0x7b, 0xfa, 0x4d, 0xa8, 0x6e, 0xc9, 0x6e, 0x10, 0xb6, 0x62, 0x25, 0x53, 0xc9, 0x1a,
	0x5d, 0x19, 0xa5, 0x3c, 0x49, 0xb9, 0xca, 0x81, 0x6b, 0xd5, 0xd5, 0x50, 0xee, 0x25, 0x86, 0x68,
	0x6c, 0xbc, 0xe0, 0xdd, 0x2c, 0x15, 0x32, 0xca, 0x01, 0xf7, 0xfb, 0x12, 0x34, 0xb5, 0xf8, 0x46,
	0x74, 0x2c, 0x94, 0x8c, 0xfa, 0x3c, 0x4a, 0xd9, 0x25, 0x98, 0xe5, 0xfd, 0x38, 0x3d, 0x71, 0x4a,
	0xcb, 0xa5, 0xdb, 0x65, 0x2f, 0x27, 0xd8, 0x26, 0x94, 0x8f, 0x03, 0x25, 0x82, 0xbd, 0x90, 0x3b,
	0x53, 0xcb, 0xd3, 0xb7, 0xab, 0x2b, 0x77, 0x5b, 0x63, 0xca, 0x5a, 0xe3, 0x57, 0xb5, 0x3e, 0x32,
	0x12, 0xde, 0x40, 0xf6, 0xda, 0x16, 0x94, 0x2d, 0xca, 0x18, 0xcc, 0x44, 0x41, 0x9f, 0xa3, 0xa2,
	0xa9, 0xdb, 0x15, 0x4f, 0x7f, 0x93, 0xf6, 0xe3, 0x20, 0xcc, 0x48, 0x49, 0x09, 0xc1, 0x9c, 0x60,
	0x97, 0x61, 0x8e, 0xbf, 0x88, 0x83, 0xa8, 0xe7, 0x4c, 0x6b, 0xa3, 0x0c, 0xe5, 0x7e, 0x3d, 0x07,
	0x4e, 0xae, 0xd5, 0xbe, 0x6c, 0x27, 0x50, 0x78, 0x0d, 0xda, 0x94, 0xb0, 0x3b, 0xd0, 0x0c, 0xe2,
	0x38, 0x14, 0xdd, 0x80, 0x0e, 0x7c, 0xa3, 0x8a, 0x6e, 0x6d, 0x14, 0xf0, 0x27, 0xa4, 0xf5, 0x06,
	0x2c, 0x74, 0x65, 0xbf, 0x8f, 0x57, 0xfa, 0xa1, 0x88, 0xac, 0xf2, 0xaa, 0xc1, 0xb6, 0x10, 0x62,
	0xff, 0x84, 0xc5, 0x6e, 0xa6, 0x14, 0x3e, 0xcb, 0xef, 0x09, 0xc5, 0xbb, 0xa9, 0x54, 0x27, 0xda,
	0x9a, 0x8a, 0xd7, 0x34, 0x07, 0xeb, 0x16, 0x67, 0x77, 0x61, 0x31, 0x15, 0x7d, 0x8e, 0x97, 0xf5,
	0x45, 0xea, 0xf7, 0x45, 0x57, 0xc9, 0xc4, 0x99, 0x41, 0xe6, 0x19, 0xaf, 0x41, 0x07, 0x5b, 0x84,
	0x3f, 0xd6, 0x30, 0xe9, 0xee, 0xf3, 0x3e, 0x4a, 0xe5, 0xdc, 0xce, 0xac, 0x66, 0xab, 0xe6, 0x98,
	0x66, 0x64, 0xb7, 0xa0, 0xde, 0x3d, 0xe4, 0xdd, 0x23, 0x5f, 0xf4, 0x42, 0x1e, 0xf1, 0x24, 0x71,
	0xe6, 0xb4, 0x1b, 0x6a, 0x1a, 0x6d, 0x1b, 0x90, 0xad, 0x41, 0x95, 0x0f, 0xbd, 0xef, 0xcc, 0x23,
	0x4f, 0x75, 0xe5, 0xc6, 0xa9, 0x61, 0xf2, 0x8a, 0x52, 0xec, 0xaf, 0x50, 0x55, 0xc8, 0xad, 0x44,
	0x37, 0xf5, 0x33, 0xe1, 0x94, 0xb5, 0x22, 0xb0, 0xd0, 0x87, 0x82, 0x2d, 0xc1, 0x5c, 0x24, 0xfd,
	0x67, 0x72, 0xcf, 0xa9, 0xe4, 0x09, 0x12, 0xc9, 0xf7, 0xe5, 0x1e, 0xbb, 0x09, 0x35, 0xbc, 0xbe,
	0x8b, 0x76, 0x98, 0x77, 0x00, 0x9e, 0xd6, 0xbc, 0x05, 0x03, 0xe6, 0x0f, 0xf9, 0x3f, 0xcc, 0x25,
	0x69, 0xcf, 0x17, 0x91, 0xb3, 0xa0, 0x8d, 0xbb, 0x39, 0x61, 0x9c, 0xc7, 0x73, 0xef, 0x0e, 0xe3,
	0xe8, 0xcd, 0xa2, 0x48, 0x3b, 0x62, 0x6f, 0xc2, 0x3c, 0xc9, 0xca, 0x2c, 0x75, 0x6a, 0x67, 0x17,
	0x26, 0x7d, 0xdb, 0x59, 0x6a, 0xa5, 0xb9, 0x52, 0x4e, 0xfd, 0x7c, 0xd2, 0x1b, 0x4a, 0xb1, 0xfb,
	0x70, 0xb9, 0x10, 0xcf, 0xc3, 0x40, 0xf5, 0x6c, 0x50, 0x1b, 0x3a, 0x5a, 0x17, 0x07, 0x41, 0x7d,
	0x84, 0x67, 0x26, 0xb0, 0x0f, 0xe0, 0x4a, 0x31, 0xa9, 0xfc, 0x78, 0x70, 0xaf, 0xd3, 0xc4, 0x0a,
	0xaa, 0x78, 0x4b, 0x85, 0xfc, 0x2a, 0xe4, 0xed, 0x5f, 0x00, 0x12, 0x44, 0xf7, 0xe4, 0x0b, 0x8c,
	0xb7, 0xb3, 0xa8, 0x53, 0xac, 0x62, 0x90, 0x76, 0x8f, 0xfd, 0x0b, 0xd8, 0x33, 0x29, 0x22, 0x1f,
	0x4d, 0x43, 0x5f, 0xd0, 0x1f, 0x7a, 0x14, 0xd3, 0xb1, 0x68, 0xd2, 0x49, 0x47, 0x1f, 0x74, 0x34,
	0xee, 0x7e, 0x55, 0x82, 0xa5, 0x42, 0x85, 0xf0, 0x35, 0x19, 0x45, 0xf8, 0x46, 0xde, 0x63, 0xef,
	0xc0, 0xec, 0xbe, 0x50, 0x49, 0xaa, 0x6b, 0xa2, 0xba, 0x72, 0xe7, 0x35, 0x79, 0x32, 0x59, 0x58,
	0x5e, 0x2e, 0xc7, 0x1e, 0x62, 0x30, 0x39, 0x0a, 0xf5, 0x74, 0xb9, 0x9c, 0xeb, 0x06, 0x23, 0xe8,
	0x7e, 0x36, 0x0d, 0x97, 0x46, 0x99, 0x3c, 0x9e, 0x64, 0x61, 0xca, 0xde, 0x40, 0xe3, 0xc2, 0xe0,
	0x20, 0x31, 0xc6, 0xdd, 0x9a, 0xb8, 0x7a, 0x4c, 0x60, 0x93, 0x98, 0xbd, 0x5c, 0x86, 0xfd, 0x0f,
	0x66, 0x28, 0x1e, 0xc6, 0xac, 0xbf, 0x9d, 0x26, 0xbb, 0x8b, 0xbc, 0x9e, 0x96, 0xa0, 0x3e, 0x93,
	0xd7, 0x9d, 0xae, 0xec, 0x19, 0xcf, 0x50, 0x79, 0x51, 0xa4, 0x99, 0x8a, 0xfc, 0xae, 0xec, 0x71,
	0x5d, 0xc9, 0x35, 0x2a, 0x0a, 0x82, 0xd6, 0x10, 0x61, 0xad, 0x61, 0x72, 0xce, 0x6a, 0xad, 0x4b,
	0x13, 0x5a, 0xa9, 0x13, 0x0f, 0xd2, 0xb1, 0x35, 0x4c, 0xc7, 0xb9, 0xd3, 0xf8, 0x29, 0x01, 0xff,
	0x01, 0x8d, 0x54, 0xa6, 0x41, 0xe8, 0x9b, 0x72, 0xe2, 0x89, 0x2e, 0xef, 0x19, 0xaf, 0xae, 0xe1,
	0x1d, 0x8b, 0x92, 0xa5, 0x47, 0x22, 0x0c, 0xfd, 0x44, 0x1c, 0x44, 0x41, 0xa8, 0xcb, 0x77, 0xd6,
	0x03, 0x82, 0x3a, 0x1a, 0x21, 0x86, 0x24, 0x95, 0xb1, 0x65, 0xa8, 0xe4, 0x0c, 0x04, 0xe5, 0x0c,
	0xee, 0x17, 0x25, 0xf8, 0xd3, 0x2b, 0x33, 0xa6, 0x10, 0x9a, 0x42, 0xde, 0xdc, 0x3a, 0x25, 0xea,
	0xb9, 0x94, 0xcd, 0x99, 0xb7, 0xc6, 0x72, 0xe6, 0x8c, 0xd2, 0x36, 0x5f, 0xbe, 0x2c, 0x41, 0x7d,
	0x94, 0x81, 0xb5, 0x01, 0x0a, 0x85, 0x45, 0xa3, 0xe4, 0x5c, 0x99, 0x58, 0x10, 0x26, 0xe3, 0x94,
	0xd6, 0x77, 0x4e, 0xe3, 0x72, 0x21, 0xf7, 0x3f, 0xb0, 0xb8, 0x2a, 0xa2, 0x40, 0x9d, 0xec, 0x9e,
	0xc4, 0xdc, 0xe3, 0xcf, 0x33, 0x94, 0x64, 0xd7, 0xa0, 0x1c, 0x07, 0xe9, 0x61, 0x61, 0xf8, 0x0c,
	0x68, 0xf7, 0x9b, 0x29, 0x60, 0x45, 0x89, 0x24, 0x96, 0x51, 0xc2, 0x99, 0x03, 0xf3, 0xfb, 0x81,
	0x08, 0x33, 0xc5, 0xcd, 0x08, 0xb6, 0x24, 0xfb, 0x60, 0xc4, 0xc0, 0xfa, 0xca, 0xfd, 0xc9, 0xa4,
	0x99, 0xb8, 0xae, 0xf5, 0x54, 0x44, 0xf7, 0x57, 0x0a, 0xb8, 0x35, 0xf7, 0xdb, 0x12, 0x34, 0xc6,
	0xce, 0x70, 0xfa, 0x36, 0x3b, 0x6b, 0x1d, 0x1f, 0xb1, 0xf6, 0xae, 0xbf, 0xda, 0x7e, 0xf2, 0xd0,
	0xfb, 0xa4, 0x79, 0x01, 0xe7, 0x74, 0x9d, 0xd0, 0xf5, 0xed, 0x8e, 0xc5, 0x4a, 0x16, 0x7b, 0xba,
	0xfd, 0xd4, 0x62, 0x53, 0x16, 0xdb, 0x69, 0x6f, 0x5a, 0x6c, 0xda, 0xde, 0xb8, 0xb3, 0xdd, 0x69,
	0x7f, 0x6c, 0xd1, 0x19, 0x8b, 0x6e, 0x77, 0x56, 0xee, 0x3d, 0xb0, 0xe8, 0xac, 0x45, 0x1f, 0xfc,
	0xb7, 0xa0, 0x7d, 0x0e, 0xdd, 0x7a, 0x71, 0x2d, 0xe4, 0x81, 0xea, 0xe4, 0x1d, 0xd0, 0x3a, 0x16,
	0xbd, 0x64, 0x7a, 0xa2, 0xf1, 0xab, 0x25, 0xdd, 0x08, 0x1a, 0xed, 0x1e, 0x8e, 0x32, 0xb1, 0x7f,
	0x62, 0x99, 0xf5, 0x7c, 0x37, 0x9e, 0xa2, 0xa6, 0x5a, 0xb2, 0xf3, 0xdd, 0x60, 0xd8, 0x56, 0xb1,
	0xeb, 0xf6, 0x65, 0x74, 0x20, 0xfd, 0x43, 0x99, 0xa4, 0x66, 0x01, 0xa8, 0x68, 0xe4, 0x11, 0x02,
	0xec, 0x2a, 0x94, 0xf3, 0xe3, 0xde, 0x9e, 0x99, 0xfa, 0xf3, 0x9a, 0x5e, 0xdf, 0x73, 0xdf, 0x46,
	0xb3, 0x73, 0xd5, 0x94, 0x1e, 0x94, 0x18, 0x09, 0x59, 0x87, 0xcd, 0x3d, 0x16, 0xa1, 0x8d, 0xba,
	0x25, 0x59, 0x13, 0xa6, 0x55, 0x16, 0x19, 0x05, 0xf4, 0xe9, 0x7e, 0x37, 0x05, 0xcd, 0xa1, 0xc1,
	0x26, 0x09, 0xd0, 0x1c, 0x11, 0x1d, 0xcb, 0xa3, 0xa2, 0xbd, 0x15, 0x83, 0xb4, 0xa9, 0x79, 0xdb,
	0x89, 0x80, 0x9d, 0x20, 0xdf, 0xc7, 0x26, 0x07, 0xfd, 0xb8, 0x55, 0xde, 0x50, 0x66, 0x7c, 0x57,
	0x98, 0xfe, 0x43, 0xbb, 0x02, 0x25, 0x77, 0x18, 0xa4, 0xfb, 0x52, 0xf5, 0x75, 0x4f, 0xa4, 0xe4,
	0x36, 0x34, 0xed, 0x2c, 0x94, 0xe8, 0x7e, 0xc2, 0xa9, 0xc2, 0x70, 0x2b, 0xd2, 0x8d, 0xb1, 0xe2,
	0xd5, 0x08, 0xed, 0x58, 0x90, 0xf6, 0xbd, 0x9e, 0x48, 0x8e, 0x68, 0xa3, 0xa1, 0x91, 0x98, 0x13,
	0xcc, 0x05, 0xda, 0x1b, 0x0e, 0xb0, 0x32, 0x37, 0xd1, 0x67, 0xd4, 0xeb, 0xe8, 0x70, 0x04, 0x73,
	0x9f, 0x43, 0x99, 0x3e, 0x3a, 0x69, 0x90, 0x16, 0x36, 0xc9, 0xd2, 0x60, 0x93, 0xc4, 0x98, 0x8b,
	0xa4, 0xb0, 0xab, 0x4d, 0xe9, 0x5a, 0xaa, 0x8a, 0x64, 0xb8, 0xa6, 0xa1, 0x58, 0x22, 0x5e, 0x72,
	0xd3, 0xec, 0xf5, 0x37, 0xbd, 0x49, 0x6f, 0x55, 0x49, 0x36, 0x78, 0x93, 0xa5, 0xdd, 0x4f, 0x4b,
	0x50, 0x25, 0x7d, 0x36, 0xad, 0x86, 0x6a, 0xa7, 0x07, 0x6a, 0x47, 0xa7, 0xf7, 0xd4, 0xf8, 0xf4,
	0x7e, 0xcd, 0x26, 0xcb, 0xfe, 0x0d, 0x0c, 0x3d, 0xdd, 0xcd, 0xd0, 0x7d, 0xdc, 0x1f, 0x31, 0xa0,
	0xec, 0x2d, 0x0e, 0x4e, 0xd6, 0xac, 0x25, 0xef, 0x42, 0xc5, 0x3e, 0x3e, 0xc1, 0xed, 0x64, 0x1e,
	0xa3, 0xa1, 0x04, 0x4f, 0xb4, 0x25, 0xd5, 0x95, 0xab, 0x13, 0x71, 0xb4, 0xcc, 0x9e, 0xe5, 0x74,
	0x97, 0x01, 0xde, 0xe3, 0xaf, 0x78, 0xc9, 0x60, 0x15, 0x77, 0xeb, 0xb0, 0xb0, 0x41, 0xbb, 0xff,
	0x63, 0x9c, 0x2c, 0xc1, 0x01, 0x77, 0x7f, 0x2d, 0x41, 0x6d, 0x4d, 0xc6, 0x27, 0xdb, 0x31, 0x57,
	0x3a, 0xa1, 0xd8, 0xdf, 0xa1, 0x11, 0x52, 0x82, 0xf8, 0xfb, 0x78, 0x7d, 0x71, 0xc1, 0xae, 0x69,
	0x98, 0x94, 0xea, 0xf5, 0x1a, 0xa7, 0x97, 0xc2, 0x41, 0x8a, 0x2f, 0x0b, 0x4d, 0x2e, 0x1a, 0xc7,
	0xd4, 0x73, 0xd8, 0x66, 0x28, 0x79, 0x27, 0x8b, 0x43, 0x19, 0x0c, 0xbc, 0x93, 0x53, 0xbf, 0x17,
	0x14, 0x1a, 0x68, 0x7d, 0xd9, 0xcb, 0xd0, 0x80, 0x14, 0x5b, 0x98, 0xc9, 0x32, 0xc8, 0x21, 0xdd,
	0xd4, 0xb0, 0x81, 0x04, 0x59, 0x7a, 0x28, 0x95, 0x78, 0x99, 0xff, 0x27, 0x90, 0x62, 0x11, 0x45,
	0x7a, 0xee, 0x56, 0x3c, 0x36, 0x72, 0xb4, 0x4b, 0x27, 0xae, 0x80, 0xfa, 0xc8, 0x3b, 0x69, 0xa3,
	0x18, 0xf3, 0xf0, 0xf5, 0x09, 0x0f, 0x8f, 0x48, 0x0c, 0xdc, 0x7c, 0x4a, 0x3a, 0xb8, 0xeb, 0x50,
	0x26, 0x0f, 0xed, 0x04, 0x42, 0xd1, 0xe3, 0x13, 0x99, 0xa9, 0xae, 0x8d, 0x82, 0xa1, 0xd8, 0x32,
	0x54, 0x7b, 0xa8, 0x09, 0xbb, 0xb4, 0xf1, 0x1c, 0x1d, 0x16, 0x21, 0xb7, 0x0f, 0x57, 0x3c, 0x1e,
	0x73, 0x4c, 0x90, 0x9e, 0xbd, 0x6d, 0xc3, 0xe8, 0x3f, 0x43, 0x6e, 0x58, 0x91, 0x33, 0x1b, 0x7d,
	0x0f, 0x96, 0xac, 0xba, 0x0e, 0x0a, 0x44, 0x07, 0x56, 0x99, 0x33, 0xaa, 0xac, 0x32, 0xb8, 0x71,
	0xb5, 0xf5, 0xc3, 0xcf, 0xd7, 0x4b, 0x3f, 0xe2, 0xef, 0x27, 0xfc, 0x7d, 0xfe, 0xcb, 0xf5, 0x0b,
	0xf0, 0x67, 0xa9, 0x0e, 0x5a, 0xf4, 0x04, 0xac, 0xe8, 0x93, 0x71, 0x9b, 0x7e, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0xd1, 0x5c, 0x4d, 0x6e, 0xd6, 0x0e, 0x00, 0x00,
}
