// Code generated by protoc-gen-go from "runlib/rpc4/rpcfour.proto"
// DO NOT EDIT!

package rpc4

import proto "code.google.com/p/goprotobuf/proto"
import "encoding/json"
import "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Header_MessageType int32

const (
	Header_REQUEST  Header_MessageType = 1
	Header_RESPONSE Header_MessageType = 2
	Header_ERROR    Header_MessageType = 3
	Header_CANCEL   Header_MessageType = 4
)

var Header_MessageType_name = map[int32]string{
	1: "REQUEST",
	2: "RESPONSE",
	3: "ERROR",
	4: "CANCEL",
}
var Header_MessageType_value = map[string]int32{
	"REQUEST":  1,
	"RESPONSE": 2,
	"ERROR":    3,
	"CANCEL":   4,
}

func (x Header_MessageType) Enum() *Header_MessageType {
	p := new(Header_MessageType)
	*p = x
	return p
}
func (x Header_MessageType) String() string {
	return proto.EnumName(Header_MessageType_name, int32(x))
}
func (x Header_MessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *Header_MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Header_MessageType_value, data, "Header_MessageType")
	if err != nil {
		return err
	}
	*x = Header_MessageType(value)
	return nil
}

type Header struct {
	Sequence         *uint64             `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	MessageType      *Header_MessageType `protobuf:"varint,2,opt,name=message_type,enum=rpc4.Header_MessageType" json:"message_type,omitempty"`
	PayloadPresent   *bool               `protobuf:"varint,3,opt,name=payload_present" json:"payload_present,omitempty"`
	Method           *string             `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (this *Header) Reset()         { *this = Header{} }
func (this *Header) String() string { return proto.CompactTextString(this) }
func (*Header) ProtoMessage()       {}

func (this *Header) GetSequence() uint64 {
	if this != nil && this.Sequence != nil {
		return *this.Sequence
	}
	return 0
}

func (this *Header) GetMessageType() Header_MessageType {
	if this != nil && this.MessageType != nil {
		return *this.MessageType
	}
	return 0
}

func (this *Header) GetPayloadPresent() bool {
	if this != nil && this.PayloadPresent != nil {
		return *this.PayloadPresent
	}
	return false
}

func (this *Header) GetMethod() string {
	if this != nil && this.Method != nil {
		return *this.Method
	}
	return ""
}

func init() {
	proto.RegisterEnum("rpc4.Header_MessageType", Header_MessageType_name, Header_MessageType_value)
}
